
HCSR04_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c3c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003ddc  08003ddc  00004ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e60  08003e60  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003e60  08003e60  00004e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e68  08003e68  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e68  08003e68  00004e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e6c  08003e6c  00004e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003e70  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000005c  08003ecc  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08003ecc  00005260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c2b8  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aa2  00000000  00000000  00011344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00012de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092c  00000000  00000000  00013998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016523  00000000  00000000  000142c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0c0  00000000  00000000  0002a7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d813  00000000  00000000  000378a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c50ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003678  00000000  00000000  000c5100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000c8778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003dc4 	.word	0x08003dc4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08003dc4 	.word	0x08003dc4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <HCSR04_TRIG_PULSE.0>:

uint16_t time_diff = 0;
uint16_t distance = 0;
uint8_t txd_msg_buffer[64] = {0};

void HCSR04_TRIG_PULSE(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	f8c7 c004 	str.w	ip, [r7, #4]
	HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005cc:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <HCSR04_TRIG_PULSE.0+0x3c>)
 80005ce:	f000 fed7 	bl	8001380 <HAL_GPIO_WritePin>
	for (int i = 0; i != 15; i = i + 1) {};
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e002      	b.n	80005de <HCSR04_TRIG_PULSE.0+0x22>
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	2b0f      	cmp	r3, #15
 80005e2:	d1f9      	bne.n	80005d8 <HCSR04_TRIG_PULSE.0+0x1c>
	HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005ea:	4803      	ldr	r0, [pc, #12]	@ (80005f8 <HCSR04_TRIG_PULSE.0+0x3c>)
 80005ec:	f000 fec8 	bl	8001380 <HAL_GPIO_WritePin>
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40020400 	.word	0x40020400

080005fc <main>:
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b092      	sub	sp, #72	@ 0x48
 8000600:	af00      	add	r7, sp, #0
int main(void)
 8000602:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000606:	643b      	str	r3, [r7, #64]	@ 0x40
uint16_t time_diff = 0;
 8000608:	2300      	movs	r3, #0
 800060a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
uint16_t distance = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
uint8_t txd_msg_buffer[64] = {0};
 8000614:	463b      	mov	r3, r7
 8000616:	2240      	movs	r2, #64	@ 0x40
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 ff54 	bl	80034c8 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fba6 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f876 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 f96e 	bl	8000908 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 f942 	bl	80008b4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000630:	f000 f8d0 	bl	80007d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim3);
 8000634:	482e      	ldr	r0, [pc, #184]	@ (80006f0 <main+0xf4>)
 8000636:	f001 fb55 	bl	8001ce4 <HAL_TIM_Base_Init>
  HAL_TIM_Base_Start(&htim3);
 800063a:	482d      	ldr	r0, [pc, #180]	@ (80006f0 <main+0xf4>)
 800063c:	f001 fba2 	bl	8001d84 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000640:	2100      	movs	r1, #0
 8000642:	482b      	ldr	r0, [pc, #172]	@ (80006f0 <main+0xf4>)
 8000644:	f001 fc52 	bl	8001eec <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  hcsr04_Rx_flag = 0;
 8000648:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <main+0xf8>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
	  first_edge = 0;
 800064e:	4b2a      	ldr	r3, [pc, #168]	@ (80006f8 <main+0xfc>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	  time_edge1 = 0;
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <main+0x100>)
 8000656:	2200      	movs	r2, #0
 8000658:	801a      	strh	r2, [r3, #0]
	  time_edge2 = 0;
 800065a:	4b29      	ldr	r3, [pc, #164]	@ (8000700 <main+0x104>)
 800065c:	2200      	movs	r2, #0
 800065e:	801a      	strh	r2, [r3, #0]
	  time_diff = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	  distance = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

	  HCSR04_TRIG_PULSE();
 800066c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000670:	469c      	mov	ip, r3
 8000672:	f7ff ffa3 	bl	80005bc <HCSR04_TRIG_PULSE.0>

	  while (hcsr04_Rx_flag == 0) {
 8000676:	bf00      	nop
 8000678:	4b1e      	ldr	r3, [pc, #120]	@ (80006f4 <main+0xf8>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0fa      	beq.n	8000678 <main+0x7c>

		  //HAL_Delay(25);
	  };

	  time_diff = time_edge2 - time_edge1;
 8000682:	4b1f      	ldr	r3, [pc, #124]	@ (8000700 <main+0x104>)
 8000684:	881b      	ldrh	r3, [r3, #0]
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b1c      	ldr	r3, [pc, #112]	@ (80006fc <main+0x100>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	b29b      	uxth	r3, r3
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

	  sprintf((char*)txd_msg_buffer, "Pulse Width (usec): %d \r\n", time_diff);
 8000694:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8000698:	463b      	mov	r3, r7
 800069a:	491a      	ldr	r1, [pc, #104]	@ (8000704 <main+0x108>)
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fef1 	bl	8003484 <siprintf>
	  HAL_UART_Transmit(&huart2, txd_msg_buffer, strlen((char*)txd_msg_buffer), 100);
 80006a2:	463b      	mov	r3, r7
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fd9b 	bl	80001e0 <strlen>
 80006aa:	4603      	mov	r3, r0
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	4639      	mov	r1, r7
 80006b0:	2364      	movs	r3, #100	@ 0x64
 80006b2:	4815      	ldr	r0, [pc, #84]	@ (8000708 <main+0x10c>)
 80006b4:	f002 fb2a 	bl	8002d0c <HAL_UART_Transmit>

	  distance = time_diff/58;
 80006b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80006bc:	4a13      	ldr	r2, [pc, #76]	@ (800070c <main+0x110>)
 80006be:	fba2 2303 	umull	r2, r3, r2, r3
 80006c2:	095b      	lsrs	r3, r3, #5
 80006c4:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

	  sprintf((char*)txd_msg_buffer, "DISTANCE TO OBJECT: %d \r\n", distance);
 80006c8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80006cc:	463b      	mov	r3, r7
 80006ce:	4910      	ldr	r1, [pc, #64]	@ (8000710 <main+0x114>)
 80006d0:	4618      	mov	r0, r3
 80006d2:	f002 fed7 	bl	8003484 <siprintf>
	  HAL_UART_Transmit(&huart2, txd_msg_buffer, strlen((char*)txd_msg_buffer), 100);
 80006d6:	463b      	mov	r3, r7
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fd81 	bl	80001e0 <strlen>
 80006de:	4603      	mov	r3, r0
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4639      	mov	r1, r7
 80006e4:	2364      	movs	r3, #100	@ 0x64
 80006e6:	4808      	ldr	r0, [pc, #32]	@ (8000708 <main+0x10c>)
 80006e8:	f002 fb10 	bl	8002d0c <HAL_UART_Transmit>
	  hcsr04_Rx_flag = 0;
 80006ec:	e7ac      	b.n	8000648 <main+0x4c>
 80006ee:	bf00      	nop
 80006f0:	20000078 	.word	0x20000078
 80006f4:	20000108 	.word	0x20000108
 80006f8:	20000109 	.word	0x20000109
 80006fc:	2000010a 	.word	0x2000010a
 8000700:	2000010c 	.word	0x2000010c
 8000704:	08003ddc 	.word	0x08003ddc
 8000708:	200000c0 	.word	0x200000c0
 800070c:	8d3dcb09 	.word	0x8d3dcb09
 8000710:	08003df8 	.word	0x08003df8

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	@ 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	@ 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f002 fed0 	bl	80034c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b23      	ldr	r3, [pc, #140]	@ (80007cc <SystemClock_Config+0xb8>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	4a22      	ldr	r2, [pc, #136]	@ (80007cc <SystemClock_Config+0xb8>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	@ 0x40
 8000748:	4b20      	ldr	r3, [pc, #128]	@ (80007cc <SystemClock_Config+0xb8>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <SystemClock_Config+0xbc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000760:	4a1b      	ldr	r2, [pc, #108]	@ (80007d0 <SystemClock_Config+0xbc>)
 8000762:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000766:	6013      	str	r3, [r2, #0]
 8000768:	4b19      	ldr	r3, [pc, #100]	@ (80007d0 <SystemClock_Config+0xbc>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000774:	2302      	movs	r3, #2
 8000776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000778:	2301      	movs	r3, #1
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	2310      	movs	r3, #16
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000780:	2300      	movs	r3, #0
 8000782:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0320 	add.w	r3, r7, #32
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fe13 	bl	80013b4 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000794:	f000 f97a 	bl	8000a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800079c:	2300      	movs	r3, #0
 800079e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ac:	f107 030c 	add.w	r3, r7, #12
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f876 	bl	80018a4 <HAL_RCC_ClockConfig>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007be:	f000 f965 	bl	8000a8c <Error_Handler>
  }
}
 80007c2:	bf00      	nop
 80007c4:	3750      	adds	r7, #80	@ 0x50
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40007000 	.word	0x40007000

080007d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	@ 0x28
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007da:	f107 0318 	add.w	r3, r7, #24
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80007f2:	463b      	mov	r3, r7
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fe:	4b2b      	ldr	r3, [pc, #172]	@ (80008ac <MX_TIM3_Init+0xd8>)
 8000800:	4a2b      	ldr	r2, [pc, #172]	@ (80008b0 <MX_TIM3_Init+0xdc>)
 8000802:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16-1;
 8000804:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <MX_TIM3_Init+0xd8>)
 8000806:	220f      	movs	r2, #15
 8000808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080a:	4b28      	ldr	r3, [pc, #160]	@ (80008ac <MX_TIM3_Init+0xd8>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535-1;
 8000810:	4b26      	ldr	r3, [pc, #152]	@ (80008ac <MX_TIM3_Init+0xd8>)
 8000812:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000816:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000818:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <MX_TIM3_Init+0xd8>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b23      	ldr	r3, [pc, #140]	@ (80008ac <MX_TIM3_Init+0xd8>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000824:	4821      	ldr	r0, [pc, #132]	@ (80008ac <MX_TIM3_Init+0xd8>)
 8000826:	f001 fa5d 	bl	8001ce4 <HAL_TIM_Base_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000830:	f000 f92c 	bl	8000a8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000834:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000838:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	4619      	mov	r1, r3
 8000840:	481a      	ldr	r0, [pc, #104]	@ (80008ac <MX_TIM3_Init+0xd8>)
 8000842:	f001 fdf9 	bl	8002438 <HAL_TIM_ConfigClockSource>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800084c:	f000 f91e 	bl	8000a8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000850:	4816      	ldr	r0, [pc, #88]	@ (80008ac <MX_TIM3_Init+0xd8>)
 8000852:	f001 faf1 	bl	8001e38 <HAL_TIM_IC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800085c:	f000 f916 	bl	8000a8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000868:	f107 0310 	add.w	r3, r7, #16
 800086c:	4619      	mov	r1, r3
 800086e:	480f      	ldr	r0, [pc, #60]	@ (80008ac <MX_TIM3_Init+0xd8>)
 8000870:	f002 f97a 	bl	8002b68 <HAL_TIMEx_MasterConfigSynchronization>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800087a:	f000 f907 	bl	8000a8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800087e:	230a      	movs	r3, #10
 8000880:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000882:	2301      	movs	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	4805      	ldr	r0, [pc, #20]	@ (80008ac <MX_TIM3_Init+0xd8>)
 8000896:	f001 fd33 	bl	8002300 <HAL_TIM_IC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80008a0:	f000 f8f4 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	3728      	adds	r7, #40	@ 0x28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	20000078 	.word	0x20000078
 80008b0:	40000400 	.word	0x40000400

080008b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ba:	4a12      	ldr	r2, [pc, #72]	@ (8000904 <MX_USART2_UART_Init+0x50>)
 80008bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b08      	ldr	r3, [pc, #32]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	@ (8000900 <MX_USART2_UART_Init+0x4c>)
 80008ec:	f002 f9be 	bl	8002c6c <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f6:	f000 f8c9 	bl	8000a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000c0 	.word	0x200000c0
 8000904:	40004400 	.word	0x40004400

08000908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	@ 0x28
 800090c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
 8000922:	4b38      	ldr	r3, [pc, #224]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	4a37      	ldr	r2, [pc, #220]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	@ 0x30
 800092e:	4b35      	ldr	r3, [pc, #212]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	4b31      	ldr	r3, [pc, #196]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a30      	ldr	r2, [pc, #192]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 8000944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b2a      	ldr	r3, [pc, #168]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a29      	ldr	r2, [pc, #164]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b27      	ldr	r3, [pc, #156]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a22      	ldr	r2, [pc, #136]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 800097c:	f043 0302 	orr.w	r3, r3, #2
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <MX_GPIO_Init+0xfc>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0302 	and.w	r3, r3, #2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800098e:	2200      	movs	r2, #0
 8000990:	2120      	movs	r1, #32
 8000992:	481d      	ldr	r0, [pc, #116]	@ (8000a08 <MX_GPIO_Init+0x100>)
 8000994:	f000 fcf4 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HCSR04_TRIG_GPIO_Port, HCSR04_TRIG_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800099e:	481b      	ldr	r0, [pc, #108]	@ (8000a0c <MX_GPIO_Init+0x104>)
 80009a0:	f000 fcee 	bl	8001380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4815      	ldr	r0, [pc, #84]	@ (8000a10 <MX_GPIO_Init+0x108>)
 80009bc:	f000 fb5c 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009c0:	2320      	movs	r3, #32
 80009c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	480c      	ldr	r0, [pc, #48]	@ (8000a08 <MX_GPIO_Init+0x100>)
 80009d8:	f000 fb4e 	bl	8001078 <HAL_GPIO_Init>

  /*Configure GPIO pin : HCSR04_TRIG_Pin */
  GPIO_InitStruct.Pin = HCSR04_TRIG_Pin;
 80009dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(HCSR04_TRIG_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <MX_GPIO_Init+0x104>)
 80009f6:	f000 fb3f 	bl	8001078 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	@ 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020400 	.word	0x40020400
 8000a10:	40020800 	.word	0x40020800

08000a14 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	if (htim -> Instance == TIM3) {
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a15      	ldr	r2, [pc, #84]	@ (8000a78 <HAL_TIM_IC_CaptureCallback+0x64>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d123      	bne.n	8000a6e <HAL_TIM_IC_CaptureCallback+0x5a>
		if (htim -> Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7f1b      	ldrb	r3, [r3, #28]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d11f      	bne.n	8000a6e <HAL_TIM_IC_CaptureCallback+0x5a>
			if (first_edge == 0) {
 8000a2e:	4b13      	ldr	r3, [pc, #76]	@ (8000a7c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d10b      	bne.n	8000a50 <HAL_TIM_IC_CaptureCallback+0x3c>
				time_edge1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000a38:	2100      	movs	r1, #0
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f001 fdc4 	bl	80025c8 <HAL_TIM_ReadCapturedValue>
 8000a40:	4603      	mov	r3, r0
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <HAL_TIM_IC_CaptureCallback+0x6c>)
 8000a46:	801a      	strh	r2, [r3, #0]
				first_edge = 1;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <HAL_TIM_IC_CaptureCallback+0x68>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
				hcsr04_Rx_flag = 1;
			}
		}
	}
}
 8000a4e:	e00e      	b.n	8000a6e <HAL_TIM_IC_CaptureCallback+0x5a>
				time_edge2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000a50:	2100      	movs	r1, #0
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f001 fdb8 	bl	80025c8 <HAL_TIM_ReadCapturedValue>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	4b09      	ldr	r3, [pc, #36]	@ (8000a84 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000a5e:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(htim, 0);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	@ 0x24
				hcsr04_Rx_flag = 1;
 8000a68:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40000400 	.word	0x40000400
 8000a7c:	20000109 	.word	0x20000109
 8000a80:	2000010a 	.word	0x2000010a
 8000a84:	2000010c 	.word	0x2000010c
 8000a88:	20000108 	.word	0x20000108

08000a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a90:	b672      	cpsid	i
}
 8000a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <Error_Handler+0x8>

08000a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b083      	sub	sp, #12
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
 8000aa2:	4b10      	ldr	r3, [pc, #64]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_MspInit+0x4c>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad2:	603b      	str	r3, [r7, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	40023800 	.word	0x40023800

08000ae8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a1d      	ldr	r2, [pc, #116]	@ (8000b7c <HAL_TIM_Base_MspInit+0x94>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d133      	bne.n	8000b72 <HAL_TIM_Base_MspInit+0x8a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <HAL_TIM_Base_MspInit+0x98>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a1b      	ldr	r2, [pc, #108]	@ (8000b80 <HAL_TIM_Base_MspInit+0x98>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <HAL_TIM_Base_MspInit+0x98>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <HAL_TIM_Base_MspInit+0x98>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <HAL_TIM_Base_MspInit+0x98>)
 8000b30:	f043 0302 	orr.w	r3, r3, #2
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <HAL_TIM_Base_MspInit+0x98>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b42:	2310      	movs	r3, #16
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000b52:	2302      	movs	r3, #2
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4809      	ldr	r0, [pc, #36]	@ (8000b84 <HAL_TIM_Base_MspInit+0x9c>)
 8000b5e:	f000 fa8b 	bl	8001078 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b62:	2200      	movs	r2, #0
 8000b64:	2100      	movs	r1, #0
 8000b66:	201d      	movs	r0, #29
 8000b68:	f000 fa4f 	bl	800100a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b6c:	201d      	movs	r0, #29
 8000b6e:	f000 fa68 	bl	8001042 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	@ 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40000400 	.word	0x40000400
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020400 	.word	0x40020400

08000b88 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <HAL_UART_MspInit+0x84>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d12b      	bne.n	8000c02 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	4a17      	ldr	r2, [pc, #92]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bba:	4b15      	ldr	r3, [pc, #84]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	4a10      	ldr	r2, [pc, #64]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bd0:	f043 0301 	orr.w	r3, r3, #1
 8000bd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <HAL_UART_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000be2:	230c      	movs	r3, #12
 8000be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bf2:	2307      	movs	r3, #7
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <HAL_UART_MspInit+0x8c>)
 8000bfe:	f000 fa3b 	bl	8001078 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	@ 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020000 	.word	0x40020000

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <NMI_Handler+0x4>

08000c20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <MemManage_Handler+0x4>

08000c30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <BusFault_Handler+0x4>

08000c38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <UsageFault_Handler+0x4>

08000c40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr

08000c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr

08000c5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c6e:	f000 f8d1 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c7c:	4802      	ldr	r0, [pc, #8]	@ (8000c88 <TIM3_IRQHandler+0x10>)
 8000c7e:	f001 fa4f 	bl	8002120 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000078 	.word	0x20000078

08000c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b086      	sub	sp, #24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c94:	4a14      	ldr	r2, [pc, #80]	@ (8000ce8 <_sbrk+0x5c>)
 8000c96:	4b15      	ldr	r3, [pc, #84]	@ (8000cec <_sbrk+0x60>)
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d102      	bne.n	8000cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ca8:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <_sbrk+0x64>)
 8000caa:	4a12      	ldr	r2, [pc, #72]	@ (8000cf4 <_sbrk+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cae:	4b10      	ldr	r3, [pc, #64]	@ (8000cf0 <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	429a      	cmp	r2, r3
 8000cba:	d207      	bcs.n	8000ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cbc:	f002 fc0c 	bl	80034d8 <__errno>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cca:	e009      	b.n	8000ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <_sbrk+0x64>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cd2:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <_sbrk+0x64>)
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	4a05      	ldr	r2, [pc, #20]	@ (8000cf0 <_sbrk+0x64>)
 8000cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cde:	68fb      	ldr	r3, [r7, #12]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3718      	adds	r7, #24
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20018000 	.word	0x20018000
 8000cec:	00000400 	.word	0x00000400
 8000cf0:	20000110 	.word	0x20000110
 8000cf4:	20000260 	.word	0x20000260

08000cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	@ (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d20:	f7ff ffea 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	@ (8000d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f002 fbcb 	bl	80034e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4e:	f7ff fc55 	bl	80005fc <main>
  bx  lr    
 8000d52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d60:	08003e70 	.word	0x08003e70
  ldr r2, =_sbss
 8000d64:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d68:	20000260 	.word	0x20000260

08000d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <HAL_Init+0x40>)
 8000d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <HAL_Init+0x40>)
 8000d86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a07      	ldr	r2, [pc, #28]	@ (8000db0 <HAL_Init+0x40>)
 8000d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 f92b 	bl	8000ff4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f000 f808 	bl	8000db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da4:	f7ff fe78 	bl	8000a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023c00 	.word	0x40023c00

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dbc:	4b12      	ldr	r3, [pc, #72]	@ (8000e08 <HAL_InitTick+0x54>)
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <HAL_InitTick+0x58>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f000 f943 	bl	800105e <HAL_SYSTICK_Config>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e00e      	b.n	8000e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	2b0f      	cmp	r3, #15
 8000de6:	d80a      	bhi.n	8000dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de8:	2200      	movs	r2, #0
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	f04f 30ff 	mov.w	r0, #4294967295
 8000df0:	f000 f90b 	bl	800100a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000df4:	4a06      	ldr	r2, [pc, #24]	@ (8000e10 <HAL_InitTick+0x5c>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	e000      	b.n	8000e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000000 	.word	0x20000000
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	20000114 	.word	0x20000114

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	@ (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	20000114 	.word	0x20000114

08000e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e64:	4b0c      	ldr	r3, [pc, #48]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6a:	68ba      	ldr	r2, [r7, #8]
 8000e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e70:	4013      	ands	r3, r2
 8000e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e86:	4a04      	ldr	r2, [pc, #16]	@ (8000e98 <__NVIC_SetPriorityGrouping+0x44>)
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	60d3      	str	r3, [r2, #12]
}
 8000e8c:	bf00      	nop
 8000e8e:	3714      	adds	r7, #20
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea0:	4b04      	ldr	r3, [pc, #16]	@ (8000eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	0a1b      	lsrs	r3, r3, #8
 8000ea6:	f003 0307 	and.w	r3, r3, #7
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	db0b      	blt.n	8000ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	f003 021f 	and.w	r2, r3, #31
 8000ed0:	4907      	ldr	r1, [pc, #28]	@ (8000ef0 <__NVIC_EnableIRQ+0x38>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	095b      	lsrs	r3, r3, #5
 8000ed8:	2001      	movs	r0, #1
 8000eda:	fa00 f202 	lsl.w	r2, r0, r2
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	@ (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	@ 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
	...

08000fb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc0:	d301      	bcc.n	8000fc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e00f      	b.n	8000fe6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fce:	210f      	movs	r1, #15
 8000fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd4:	f7ff ff8e 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd8:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fde:	4b04      	ldr	r3, [pc, #16]	@ (8000ff0 <SysTick_Config+0x40>)
 8000fe0:	2207      	movs	r2, #7
 8000fe2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	e000e010 	.word	0xe000e010

08000ff4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f7ff ff29 	bl	8000e54 <__NVIC_SetPriorityGrouping>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	4603      	mov	r3, r0
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800101c:	f7ff ff3e 	bl	8000e9c <__NVIC_GetPriorityGrouping>
 8001020:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	68b9      	ldr	r1, [r7, #8]
 8001026:	6978      	ldr	r0, [r7, #20]
 8001028:	f7ff ff8e 	bl	8000f48 <NVIC_EncodePriority>
 800102c:	4602      	mov	r2, r0
 800102e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff5d 	bl	8000ef4 <__NVIC_SetPriority>
}
 800103a:	bf00      	nop
 800103c:	3718      	adds	r7, #24
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b082      	sub	sp, #8
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff ff31 	bl	8000eb8 <__NVIC_EnableIRQ>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffa2 	bl	8000fb0 <SysTick_Config>
 800106c:	4603      	mov	r3, r0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	@ 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
 8001092:	e159      	b.n	8001348 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001094:	2201      	movs	r2, #1
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	f040 8148 	bne.w	8001342 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d005      	beq.n	80010ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d130      	bne.n	800112c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	2203      	movs	r2, #3
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001100:	2201      	movs	r2, #1
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	091b      	lsrs	r3, r3, #4
 8001116:	f003 0201 	and.w	r2, r3, #1
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 0303 	and.w	r3, r3, #3
 8001134:	2b03      	cmp	r3, #3
 8001136:	d017      	beq.n	8001168 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	2203      	movs	r2, #3
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d123      	bne.n	80011bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	08da      	lsrs	r2, r3, #3
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	3208      	adds	r2, #8
 800117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	69ba      	ldr	r2, [r7, #24]
 8001194:	4013      	ands	r3, r2
 8001196:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	69b9      	ldr	r1, [r7, #24]
 80011b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0203 	and.w	r2, r3, #3
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	f000 80a2 	beq.w	8001342 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b57      	ldr	r3, [pc, #348]	@ (8001360 <HAL_GPIO_Init+0x2e8>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a56      	ldr	r2, [pc, #344]	@ (8001360 <HAL_GPIO_Init+0x2e8>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b54      	ldr	r3, [pc, #336]	@ (8001360 <HAL_GPIO_Init+0x2e8>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121a:	4a52      	ldr	r2, [pc, #328]	@ (8001364 <HAL_GPIO_Init+0x2ec>)
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	089b      	lsrs	r3, r3, #2
 8001220:	3302      	adds	r3, #2
 8001222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001226:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	220f      	movs	r2, #15
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a49      	ldr	r2, [pc, #292]	@ (8001368 <HAL_GPIO_Init+0x2f0>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d019      	beq.n	800127a <HAL_GPIO_Init+0x202>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a48      	ldr	r2, [pc, #288]	@ (800136c <HAL_GPIO_Init+0x2f4>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d013      	beq.n	8001276 <HAL_GPIO_Init+0x1fe>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a47      	ldr	r2, [pc, #284]	@ (8001370 <HAL_GPIO_Init+0x2f8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d00d      	beq.n	8001272 <HAL_GPIO_Init+0x1fa>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a46      	ldr	r2, [pc, #280]	@ (8001374 <HAL_GPIO_Init+0x2fc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d007      	beq.n	800126e <HAL_GPIO_Init+0x1f6>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a45      	ldr	r2, [pc, #276]	@ (8001378 <HAL_GPIO_Init+0x300>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d101      	bne.n	800126a <HAL_GPIO_Init+0x1f2>
 8001266:	2304      	movs	r3, #4
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x204>
 800126a:	2307      	movs	r3, #7
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x204>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x204>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x204>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x204>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	@ (8001364 <HAL_GPIO_Init+0x2ec>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b38      	ldr	r3, [pc, #224]	@ (800137c <HAL_GPIO_Init+0x304>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a2f      	ldr	r2, [pc, #188]	@ (800137c <HAL_GPIO_Init+0x304>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <HAL_GPIO_Init+0x304>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a24      	ldr	r2, [pc, #144]	@ (800137c <HAL_GPIO_Init+0x304>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ee:	4b23      	ldr	r3, [pc, #140]	@ (800137c <HAL_GPIO_Init+0x304>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001312:	4a1a      	ldr	r2, [pc, #104]	@ (800137c <HAL_GPIO_Init+0x304>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4b18      	ldr	r3, [pc, #96]	@ (800137c <HAL_GPIO_Init+0x304>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133c:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <HAL_GPIO_Init+0x304>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f aea2 	bls.w	8001094 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	@ 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40013c00 	.word	0x40013c00

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800139c:	e003      	b.n	80013a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800139e:	887b      	ldrh	r3, [r7, #2]
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	619a      	str	r2, [r3, #24]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e267      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d075      	beq.n	80014be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013d2:	4b88      	ldr	r3, [pc, #544]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d00c      	beq.n	80013f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013de:	4b85      	ldr	r3, [pc, #532]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d112      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013ea:	4b82      	ldr	r3, [pc, #520]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013f6:	d10b      	bne.n	8001410 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	4b7e      	ldr	r3, [pc, #504]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d05b      	beq.n	80014bc <HAL_RCC_OscConfig+0x108>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d157      	bne.n	80014bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e242      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001418:	d106      	bne.n	8001428 <HAL_RCC_OscConfig+0x74>
 800141a:	4b76      	ldr	r3, [pc, #472]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a75      	ldr	r2, [pc, #468]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e01d      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001430:	d10c      	bne.n	800144c <HAL_RCC_OscConfig+0x98>
 8001432:	4b70      	ldr	r3, [pc, #448]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a6f      	ldr	r2, [pc, #444]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b6d      	ldr	r3, [pc, #436]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a6c      	ldr	r2, [pc, #432]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	e00b      	b.n	8001464 <HAL_RCC_OscConfig+0xb0>
 800144c:	4b69      	ldr	r3, [pc, #420]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a68      	ldr	r2, [pc, #416]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b66      	ldr	r3, [pc, #408]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a65      	ldr	r2, [pc, #404]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 800145e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d013      	beq.n	8001494 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146c:	f7ff fce6 	bl	8000e3c <HAL_GetTick>
 8001470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001472:	e008      	b.n	8001486 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff fce2 	bl	8000e3c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	@ 0x64
 8001480:	d901      	bls.n	8001486 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e207      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001486:	4b5b      	ldr	r3, [pc, #364]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d0f0      	beq.n	8001474 <HAL_RCC_OscConfig+0xc0>
 8001492:	e014      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fcd2 	bl	8000e3c <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fcce 	bl	8000e3c <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b64      	cmp	r3, #100	@ 0x64
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e1f3      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ae:	4b51      	ldr	r3, [pc, #324]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0xe8>
 80014ba:	e000      	b.n	80014be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0302 	and.w	r3, r3, #2
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d063      	beq.n	8001592 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014ca:	4b4a      	ldr	r3, [pc, #296]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 030c 	and.w	r3, r3, #12
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00b      	beq.n	80014ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014d6:	4b47      	ldr	r3, [pc, #284]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d11c      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014e2:	4b44      	ldr	r3, [pc, #272]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	4b41      	ldr	r3, [pc, #260]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d001      	beq.n	8001506 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e1c7      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001506:	4b3b      	ldr	r3, [pc, #236]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4937      	ldr	r1, [pc, #220]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001516:	4313      	orrs	r3, r2
 8001518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151a:	e03a      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d020      	beq.n	8001566 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001524:	4b34      	ldr	r3, [pc, #208]	@ (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800152a:	f7ff fc87 	bl	8000e3c <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001532:	f7ff fc83 	bl	8000e3c <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e1a8      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001544:	4b2b      	ldr	r3, [pc, #172]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001550:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4925      	ldr	r1, [pc, #148]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]
 8001564:	e015      	b.n	8001592 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <HAL_RCC_OscConfig+0x244>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800156c:	f7ff fc66 	bl	8000e3c <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff fc62 	bl	8000e3c <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e187      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001586:	4b1b      	ldr	r3, [pc, #108]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	2b00      	cmp	r3, #0
 800159c:	d036      	beq.n	800160c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d016      	beq.n	80015d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <HAL_RCC_OscConfig+0x248>)
 80015a8:	2201      	movs	r2, #1
 80015aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ac:	f7ff fc46 	bl	8000e3c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b4:	f7ff fc42 	bl	8000e3c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e167      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015c6:	4b0b      	ldr	r3, [pc, #44]	@ (80015f4 <HAL_RCC_OscConfig+0x240>)
 80015c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x200>
 80015d2:	e01b      	b.n	800160c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015d4:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <HAL_RCC_OscConfig+0x248>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff fc2f 	bl	8000e3c <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e0:	e00e      	b.n	8001600 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e2:	f7ff fc2b 	bl	8000e3c <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d907      	bls.n	8001600 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e150      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
 80015f4:	40023800 	.word	0x40023800
 80015f8:	42470000 	.word	0x42470000
 80015fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001600:	4b88      	ldr	r3, [pc, #544]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1ea      	bne.n	80015e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 8097 	beq.w	8001748 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800161e:	4b81      	ldr	r3, [pc, #516]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10f      	bne.n	800164a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	4b7d      	ldr	r3, [pc, #500]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001632:	4a7c      	ldr	r2, [pc, #496]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001638:	6413      	str	r3, [r2, #64]	@ 0x40
 800163a:	4b7a      	ldr	r3, [pc, #488]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001642:	60bb      	str	r3, [r7, #8]
 8001644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001646:	2301      	movs	r3, #1
 8001648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164a:	4b77      	ldr	r3, [pc, #476]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d118      	bne.n	8001688 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001656:	4b74      	ldr	r3, [pc, #464]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a73      	ldr	r2, [pc, #460]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800165c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001662:	f7ff fbeb 	bl	8000e3c <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7ff fbe7 	bl	8000e3c <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e10c      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167c:	4b6a      	ldr	r3, [pc, #424]	@ (8001828 <HAL_RCC_OscConfig+0x474>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x2ea>
 8001690:	4b64      	ldr	r3, [pc, #400]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001694:	4a63      	ldr	r2, [pc, #396]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6713      	str	r3, [r2, #112]	@ 0x70
 800169c:	e01c      	b.n	80016d8 <HAL_RCC_OscConfig+0x324>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x30c>
 80016a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b2:	4b5c      	ldr	r3, [pc, #368]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b6:	4a5b      	ldr	r2, [pc, #364]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0x324>
 80016c0:	4b58      	ldr	r3, [pc, #352]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c4:	4a57      	ldr	r2, [pc, #348]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016c6:	f023 0301 	bic.w	r3, r3, #1
 80016ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80016cc:	4b55      	ldr	r3, [pc, #340]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d0:	4a54      	ldr	r2, [pc, #336]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80016d2:	f023 0304 	bic.w	r3, r3, #4
 80016d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d015      	beq.n	800170c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e0:	f7ff fbac 	bl	8000e3c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7ff fba8 	bl	8000e3c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0cb      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fe:	4b49      	ldr	r3, [pc, #292]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0ee      	beq.n	80016e8 <HAL_RCC_OscConfig+0x334>
 800170a:	e014      	b.n	8001736 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff fb96 	bl	8000e3c <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001712:	e00a      	b.n	800172a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001714:	f7ff fb92 	bl	8000e3c <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001722:	4293      	cmp	r3, r2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e0b5      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172a:	4b3e      	ldr	r3, [pc, #248]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800172c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ee      	bne.n	8001714 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001736:	7dfb      	ldrb	r3, [r7, #23]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800173c:	4b39      	ldr	r3, [pc, #228]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	4a38      	ldr	r2, [pc, #224]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001742:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001746:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a1 	beq.w	8001894 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001752:	4b34      	ldr	r3, [pc, #208]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b08      	cmp	r3, #8
 800175c:	d05c      	beq.n	8001818 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d141      	bne.n	80017ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001766:	4b31      	ldr	r3, [pc, #196]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fb66 	bl	8000e3c <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff fb62 	bl	8000e3c <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e087      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001786:	4b27      	ldr	r3, [pc, #156]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69da      	ldr	r2, [r3, #28]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a0:	019b      	lsls	r3, r3, #6
 80017a2:	431a      	orrs	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	085b      	lsrs	r3, r3, #1
 80017aa:	3b01      	subs	r3, #1
 80017ac:	041b      	lsls	r3, r3, #16
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	061b      	lsls	r3, r3, #24
 80017b6:	491b      	ldr	r1, [pc, #108]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017bc:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fb3b 	bl	8000e3c <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fb37 	bl	8000e3c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e05c      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x416>
 80017e8:	e054      	b.n	8001894 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_RCC_OscConfig+0x478>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f0:	f7ff fb24 	bl	8000e3c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff fb20 	bl	8000e3c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e045      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800180a:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_RCC_OscConfig+0x470>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x444>
 8001816:	e03d      	b.n	8001894 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e038      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
 8001824:	40023800 	.word	0x40023800
 8001828:	40007000 	.word	0x40007000
 800182c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_RCC_OscConfig+0x4ec>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d028      	beq.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001848:	429a      	cmp	r2, r3
 800184a:	d121      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	429a      	cmp	r2, r3
 8001858:	d11a      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001860:	4013      	ands	r3, r2
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001866:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001868:	4293      	cmp	r3, r2
 800186a:	d111      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001876:	085b      	lsrs	r3, r3, #1
 8001878:	3b01      	subs	r3, #1
 800187a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800187c:	429a      	cmp	r2, r3
 800187e:	d107      	bne.n	8001890 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800188a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023800 	.word	0x40023800

080018a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0cc      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018b8:	4b68      	ldr	r3, [pc, #416]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d90c      	bls.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018c6:	4b65      	ldr	r3, [pc, #404]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ce:	4b63      	ldr	r3, [pc, #396]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d001      	beq.n	80018e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0b8      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d020      	beq.n	800192e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0304 	and.w	r3, r3, #4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018f8:	4b59      	ldr	r3, [pc, #356]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	4a58      	ldr	r2, [pc, #352]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001902:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	2b00      	cmp	r3, #0
 800190e:	d005      	beq.n	800191c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001910:	4b53      	ldr	r3, [pc, #332]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a52      	ldr	r2, [pc, #328]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800191a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800191c:	4b50      	ldr	r3, [pc, #320]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	494d      	ldr	r1, [pc, #308]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	4313      	orrs	r3, r2
 800192c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d044      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b47      	ldr	r3, [pc, #284]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d119      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e07f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d003      	beq.n	8001962 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	2b03      	cmp	r3, #3
 8001960:	d107      	bne.n	8001972 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001962:	4b3f      	ldr	r3, [pc, #252]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d109      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e06f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	4b3b      	ldr	r3, [pc, #236]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e067      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001982:	4b37      	ldr	r3, [pc, #220]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f023 0203 	bic.w	r2, r3, #3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	4934      	ldr	r1, [pc, #208]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	4313      	orrs	r3, r2
 8001992:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001994:	f7ff fa52 	bl	8000e3c <HAL_GetTick>
 8001998:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800199c:	f7ff fa4e 	bl	8000e3c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e04f      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 020c 	and.w	r2, r3, #12
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d1eb      	bne.n	800199c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019c4:	4b25      	ldr	r3, [pc, #148]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	683a      	ldr	r2, [r7, #0]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d20c      	bcs.n	80019ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d2:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019da:	4b20      	ldr	r3, [pc, #128]	@ (8001a5c <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d001      	beq.n	80019ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e032      	b.n	8001a52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0304 	and.w	r3, r3, #4
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d008      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	4916      	ldr	r1, [pc, #88]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a16:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	490e      	ldr	r1, [pc, #56]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a2a:	f000 f821 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	490a      	ldr	r1, [pc, #40]	@ (8001a64 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	5ccb      	ldrb	r3, [r1, r3]
 8001a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a42:	4a09      	ldr	r2, [pc, #36]	@ (8001a68 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_RCC_ClockConfig+0x1c8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f9b2 	bl	8000db4 <HAL_InitTick>

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3710      	adds	r7, #16
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	08003e14 	.word	0x08003e14
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a74:	b094      	sub	sp, #80	@ 0x50
 8001a76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a88:	4b79      	ldr	r3, [pc, #484]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b08      	cmp	r3, #8
 8001a92:	d00d      	beq.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x40>
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	f200 80e1 	bhi.w	8001c5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d002      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x34>
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d003      	beq.n	8001aaa <HAL_RCC_GetSysClockFreq+0x3a>
 8001aa2:	e0db      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa4:	4b73      	ldr	r3, [pc, #460]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aa8:	e0db      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aaa:	4b73      	ldr	r3, [pc, #460]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x208>)
 8001aac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aae:	e0d8      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab0:	4b6f      	ldr	r3, [pc, #444]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ab8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aba:	4b6d      	ldr	r3, [pc, #436]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d063      	beq.n	8001b8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac6:	4b6a      	ldr	r3, [pc, #424]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	099b      	lsrs	r3, r3, #6
 8001acc:	2200      	movs	r2, #0
 8001ace:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ad0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ad8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ada:	2300      	movs	r3, #0
 8001adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ade:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ae2:	4622      	mov	r2, r4
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	f04f 0000 	mov.w	r0, #0
 8001aea:	f04f 0100 	mov.w	r1, #0
 8001aee:	0159      	lsls	r1, r3, #5
 8001af0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af4:	0150      	lsls	r0, r2, #5
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4621      	mov	r1, r4
 8001afc:	1a51      	subs	r1, r2, r1
 8001afe:	6139      	str	r1, [r7, #16]
 8001b00:	4629      	mov	r1, r5
 8001b02:	eb63 0301 	sbc.w	r3, r3, r1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	f04f 0200 	mov.w	r2, #0
 8001b0c:	f04f 0300 	mov.w	r3, #0
 8001b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b14:	4659      	mov	r1, fp
 8001b16:	018b      	lsls	r3, r1, #6
 8001b18:	4651      	mov	r1, sl
 8001b1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b1e:	4651      	mov	r1, sl
 8001b20:	018a      	lsls	r2, r1, #6
 8001b22:	4651      	mov	r1, sl
 8001b24:	ebb2 0801 	subs.w	r8, r2, r1
 8001b28:	4659      	mov	r1, fp
 8001b2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b42:	4690      	mov	r8, r2
 8001b44:	4699      	mov	r9, r3
 8001b46:	4623      	mov	r3, r4
 8001b48:	eb18 0303 	adds.w	r3, r8, r3
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	462b      	mov	r3, r5
 8001b50:	eb49 0303 	adc.w	r3, r9, r3
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	f04f 0300 	mov.w	r3, #0
 8001b5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b62:	4629      	mov	r1, r5
 8001b64:	024b      	lsls	r3, r1, #9
 8001b66:	4621      	mov	r1, r4
 8001b68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	024a      	lsls	r2, r1, #9
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b76:	2200      	movs	r2, #0
 8001b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b80:	f7fe fb86 	bl	8000290 <__aeabi_uldivmod>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	4613      	mov	r3, r2
 8001b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b8c:	e058      	b.n	8001c40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b8e:	4b38      	ldr	r3, [pc, #224]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	099b      	lsrs	r3, r3, #6
 8001b94:	2200      	movs	r2, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	4611      	mov	r1, r2
 8001b9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b9e:	623b      	str	r3, [r7, #32]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ba8:	4642      	mov	r2, r8
 8001baa:	464b      	mov	r3, r9
 8001bac:	f04f 0000 	mov.w	r0, #0
 8001bb0:	f04f 0100 	mov.w	r1, #0
 8001bb4:	0159      	lsls	r1, r3, #5
 8001bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bba:	0150      	lsls	r0, r2, #5
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4641      	mov	r1, r8
 8001bc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8001bc6:	4649      	mov	r1, r9
 8001bc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bdc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001be0:	ebb2 040a 	subs.w	r4, r2, sl
 8001be4:	eb63 050b 	sbc.w	r5, r3, fp
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	f04f 0300 	mov.w	r3, #0
 8001bf0:	00eb      	lsls	r3, r5, #3
 8001bf2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bf6:	00e2      	lsls	r2, r4, #3
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	4643      	mov	r3, r8
 8001bfe:	18e3      	adds	r3, r4, r3
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	464b      	mov	r3, r9
 8001c04:	eb45 0303 	adc.w	r3, r5, r3
 8001c08:	607b      	str	r3, [r7, #4]
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c16:	4629      	mov	r1, r5
 8001c18:	028b      	lsls	r3, r1, #10
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c20:	4621      	mov	r1, r4
 8001c22:	028a      	lsls	r2, r1, #10
 8001c24:	4610      	mov	r0, r2
 8001c26:	4619      	mov	r1, r3
 8001c28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	61fa      	str	r2, [r7, #28]
 8001c30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c34:	f7fe fb2c 	bl	8000290 <__aeabi_uldivmod>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	0c1b      	lsrs	r3, r3, #16
 8001c46:	f003 0303 	and.w	r3, r3, #3
 8001c4a:	3301      	adds	r3, #1
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c5a:	e002      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3750      	adds	r7, #80	@ 0x50
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	00f42400 	.word	0x00f42400
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c80:	4b03      	ldr	r3, [pc, #12]	@ (8001c90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000

08001c94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0a9b      	lsrs	r3, r3, #10
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4903      	ldr	r1, [pc, #12]	@ (8001cb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	08003e24 	.word	0x08003e24

08001cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc0:	f7ff ffdc 	bl	8001c7c <HAL_RCC_GetHCLKFreq>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	0b5b      	lsrs	r3, r3, #13
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	4903      	ldr	r1, [pc, #12]	@ (8001ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd2:	5ccb      	ldrb	r3, [r1, r3]
 8001cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	08003e24 	.word	0x08003e24

08001ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e041      	b.n	8001d7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d106      	bne.n	8001d10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7fe feec 	bl	8000ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2202      	movs	r2, #2
 8001d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3304      	adds	r3, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f000 fcbc 	bl	80026a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d001      	beq.n	8001d9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e03c      	b.n	8001e16 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2202      	movs	r2, #2
 8001da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e24 <HAL_TIM_Base_Start+0xa0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d018      	beq.n	8001de0 <HAL_TIM_Base_Start+0x5c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db6:	d013      	beq.n	8001de0 <HAL_TIM_Base_Start+0x5c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001e28 <HAL_TIM_Base_Start+0xa4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00e      	beq.n	8001de0 <HAL_TIM_Base_Start+0x5c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a19      	ldr	r2, [pc, #100]	@ (8001e2c <HAL_TIM_Base_Start+0xa8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_TIM_Base_Start+0x5c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a17      	ldr	r2, [pc, #92]	@ (8001e30 <HAL_TIM_Base_Start+0xac>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_TIM_Base_Start+0x5c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a16      	ldr	r2, [pc, #88]	@ (8001e34 <HAL_TIM_Base_Start+0xb0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d111      	bne.n	8001e04 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d010      	beq.n	8001e14 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e02:	e007      	b.n	8001e14 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40014000 	.word	0x40014000

08001e38 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e041      	b.n	8001ece <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f000 f839 	bl	8001ed6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2202      	movs	r2, #2
 8001e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3304      	adds	r3, #4
 8001e74:	4619      	mov	r1, r3
 8001e76:	4610      	mov	r0, r2
 8001e78:	f000 fc12 	bl	80026a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d104      	bne.n	8001f0a <HAL_TIM_IC_Start_IT+0x1e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	e013      	b.n	8001f32 <HAL_TIM_IC_Start_IT+0x46>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b04      	cmp	r3, #4
 8001f0e:	d104      	bne.n	8001f1a <HAL_TIM_IC_Start_IT+0x2e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	e00b      	b.n	8001f32 <HAL_TIM_IC_Start_IT+0x46>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d104      	bne.n	8001f2a <HAL_TIM_IC_Start_IT+0x3e>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	e003      	b.n	8001f32 <HAL_TIM_IC_Start_IT+0x46>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d104      	bne.n	8001f44 <HAL_TIM_IC_Start_IT+0x58>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	e013      	b.n	8001f6c <HAL_TIM_IC_Start_IT+0x80>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d104      	bne.n	8001f54 <HAL_TIM_IC_Start_IT+0x68>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	e00b      	b.n	8001f6c <HAL_TIM_IC_Start_IT+0x80>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b08      	cmp	r3, #8
 8001f58:	d104      	bne.n	8001f64 <HAL_TIM_IC_Start_IT+0x78>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e003      	b.n	8001f6c <HAL_TIM_IC_Start_IT+0x80>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8001f6e:	7bbb      	ldrb	r3, [r7, #14]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d102      	bne.n	8001f7a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8001f74:	7b7b      	ldrb	r3, [r7, #13]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d001      	beq.n	8001f7e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0c2      	b.n	8002104 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d104      	bne.n	8001f8e <HAL_TIM_IC_Start_IT+0xa2>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f8c:	e013      	b.n	8001fb6 <HAL_TIM_IC_Start_IT+0xca>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d104      	bne.n	8001f9e <HAL_TIM_IC_Start_IT+0xb2>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2202      	movs	r2, #2
 8001f98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f9c:	e00b      	b.n	8001fb6 <HAL_TIM_IC_Start_IT+0xca>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d104      	bne.n	8001fae <HAL_TIM_IC_Start_IT+0xc2>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2202      	movs	r2, #2
 8001fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fac:	e003      	b.n	8001fb6 <HAL_TIM_IC_Start_IT+0xca>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <HAL_TIM_IC_Start_IT+0xda>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fc4:	e013      	b.n	8001fee <HAL_TIM_IC_Start_IT+0x102>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d104      	bne.n	8001fd6 <HAL_TIM_IC_Start_IT+0xea>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fd4:	e00b      	b.n	8001fee <HAL_TIM_IC_Start_IT+0x102>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_IC_Start_IT+0xfa>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fe4:	e003      	b.n	8001fee <HAL_TIM_IC_Start_IT+0x102>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b0c      	cmp	r3, #12
 8001ff2:	d841      	bhi.n	8002078 <HAL_TIM_IC_Start_IT+0x18c>
 8001ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8001ffc <HAL_TIM_IC_Start_IT+0x110>)
 8001ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffa:	bf00      	nop
 8001ffc:	08002031 	.word	0x08002031
 8002000:	08002079 	.word	0x08002079
 8002004:	08002079 	.word	0x08002079
 8002008:	08002079 	.word	0x08002079
 800200c:	08002043 	.word	0x08002043
 8002010:	08002079 	.word	0x08002079
 8002014:	08002079 	.word	0x08002079
 8002018:	08002079 	.word	0x08002079
 800201c:	08002055 	.word	0x08002055
 8002020:	08002079 	.word	0x08002079
 8002024:	08002079 	.word	0x08002079
 8002028:	08002079 	.word	0x08002079
 800202c:	08002067 	.word	0x08002067
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0202 	orr.w	r2, r2, #2
 800203e:	60da      	str	r2, [r3, #12]
      break;
 8002040:	e01d      	b.n	800207e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0204 	orr.w	r2, r2, #4
 8002050:	60da      	str	r2, [r3, #12]
      break;
 8002052:	e014      	b.n	800207e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	68da      	ldr	r2, [r3, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0208 	orr.w	r2, r2, #8
 8002062:	60da      	str	r2, [r3, #12]
      break;
 8002064:	e00b      	b.n	800207e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f042 0210 	orr.w	r2, r2, #16
 8002074:	60da      	str	r2, [r3, #12]
      break;
 8002076:	e002      	b.n	800207e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      break;
 800207c:	bf00      	nop
  }

  if (status == HAL_OK)
 800207e:	7bfb      	ldrb	r3, [r7, #15]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d13e      	bne.n	8002102 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2201      	movs	r2, #1
 800208a:	6839      	ldr	r1, [r7, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f000 fd45 	bl	8002b1c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a1d      	ldr	r2, [pc, #116]	@ (800210c <HAL_TIM_IC_Start_IT+0x220>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d018      	beq.n	80020ce <HAL_TIM_IC_Start_IT+0x1e2>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a4:	d013      	beq.n	80020ce <HAL_TIM_IC_Start_IT+0x1e2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a19      	ldr	r2, [pc, #100]	@ (8002110 <HAL_TIM_IC_Start_IT+0x224>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d00e      	beq.n	80020ce <HAL_TIM_IC_Start_IT+0x1e2>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a17      	ldr	r2, [pc, #92]	@ (8002114 <HAL_TIM_IC_Start_IT+0x228>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d009      	beq.n	80020ce <HAL_TIM_IC_Start_IT+0x1e2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a16      	ldr	r2, [pc, #88]	@ (8002118 <HAL_TIM_IC_Start_IT+0x22c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d004      	beq.n	80020ce <HAL_TIM_IC_Start_IT+0x1e2>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a14      	ldr	r2, [pc, #80]	@ (800211c <HAL_TIM_IC_Start_IT+0x230>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d111      	bne.n	80020f2 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b06      	cmp	r3, #6
 80020de:	d010      	beq.n	8002102 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f0:	e007      	b.n	8002102 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0201 	orr.w	r2, r2, #1
 8002100:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002102:	7bfb      	ldrb	r3, [r7, #15]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40010000 	.word	0x40010000
 8002110:	40000400 	.word	0x40000400
 8002114:	40000800 	.word	0x40000800
 8002118:	40000c00 	.word	0x40000c00
 800211c:	40014000 	.word	0x40014000

08002120 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d020      	beq.n	8002184 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01b      	beq.n	8002184 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f06f 0202 	mvn.w	r2, #2
 8002154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7fe fc52 	bl	8000a14 <HAL_TIM_IC_CaptureCallback>
 8002170:	e005      	b.n	800217e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fa76 	bl	8002664 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 fa7d 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d020      	beq.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d01b      	beq.n	80021d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0204 	mvn.w	r2, #4
 80021a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe fc2c 	bl	8000a14 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fa50 	bl	8002664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fa57 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d020      	beq.n	800221c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01b      	beq.n	800221c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0208 	mvn.w	r2, #8
 80021ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2204      	movs	r2, #4
 80021f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fc06 	bl	8000a14 <HAL_TIM_IC_CaptureCallback>
 8002208:	e005      	b.n	8002216 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 fa2a 	bl	8002664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f000 fa31 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	2b00      	cmp	r3, #0
 8002224:	d020      	beq.n	8002268 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b00      	cmp	r3, #0
 800222e:	d01b      	beq.n	8002268 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0210 	mvn.w	r2, #16
 8002238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2208      	movs	r2, #8
 800223e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f7fe fbe0 	bl	8000a14 <HAL_TIM_IC_CaptureCallback>
 8002254:	e005      	b.n	8002262 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 fa04 	bl	8002664 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 fa0b 	bl	8002678 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00c      	beq.n	800228c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b00      	cmp	r3, #0
 800227a:	d007      	beq.n	800228c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f06f 0201 	mvn.w	r2, #1
 8002284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f9e2 	bl	8002650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00c      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800229c:	2b00      	cmp	r3, #0
 800229e:	d007      	beq.n	80022b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80022a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fcd4 	bl	8002c58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d007      	beq.n	80022d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80022cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f9dc 	bl	800268c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	f003 0320 	and.w	r3, r3, #32
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00c      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f003 0320 	and.w	r3, r3, #32
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0220 	mvn.w	r2, #32
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 fca6 	bl	8002c44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80022f8:	bf00      	nop
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002316:	2b01      	cmp	r3, #1
 8002318:	d101      	bne.n	800231e <HAL_TIM_IC_ConfigChannel+0x1e>
 800231a:	2302      	movs	r3, #2
 800231c:	e088      	b.n	8002430 <HAL_TIM_IC_ConfigChannel+0x130>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d11b      	bne.n	8002364 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800233c:	f000 fa36 	bl	80027ac <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	699a      	ldr	r2, [r3, #24]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 020c 	bic.w	r2, r2, #12
 800234e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6999      	ldr	r1, [r3, #24]
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	619a      	str	r2, [r3, #24]
 8002362:	e060      	b.n	8002426 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d11c      	bne.n	80023a4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800237a:	f000 faae 	bl	80028da <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800238c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6999      	ldr	r1, [r3, #24]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	021a      	lsls	r2, r3, #8
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	619a      	str	r2, [r3, #24]
 80023a2:	e040      	b.n	8002426 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b08      	cmp	r3, #8
 80023a8:	d11b      	bne.n	80023e2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80023ba:	f000 fafb 	bl	80029b4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	69da      	ldr	r2, [r3, #28]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 020c 	bic.w	r2, r2, #12
 80023cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69d9      	ldr	r1, [r3, #28]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	61da      	str	r2, [r3, #28]
 80023e0:	e021      	b.n	8002426 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b0c      	cmp	r3, #12
 80023e6:	d11c      	bne.n	8002422 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80023f8:	f000 fb18 	bl	8002a2c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800240a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	69d9      	ldr	r1, [r3, #28]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	021a      	lsls	r2, r3, #8
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	61da      	str	r2, [r3, #28]
 8002420:	e001      	b.n	8002426 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800242e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_TIM_ConfigClockSource+0x1c>
 8002450:	2302      	movs	r3, #2
 8002452:	e0b4      	b.n	80025be <HAL_TIM_ConfigClockSource+0x186>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800247a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800248c:	d03e      	beq.n	800250c <HAL_TIM_ConfigClockSource+0xd4>
 800248e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002492:	f200 8087 	bhi.w	80025a4 <HAL_TIM_ConfigClockSource+0x16c>
 8002496:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800249a:	f000 8086 	beq.w	80025aa <HAL_TIM_ConfigClockSource+0x172>
 800249e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024a2:	d87f      	bhi.n	80025a4 <HAL_TIM_ConfigClockSource+0x16c>
 80024a4:	2b70      	cmp	r3, #112	@ 0x70
 80024a6:	d01a      	beq.n	80024de <HAL_TIM_ConfigClockSource+0xa6>
 80024a8:	2b70      	cmp	r3, #112	@ 0x70
 80024aa:	d87b      	bhi.n	80025a4 <HAL_TIM_ConfigClockSource+0x16c>
 80024ac:	2b60      	cmp	r3, #96	@ 0x60
 80024ae:	d050      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0x11a>
 80024b0:	2b60      	cmp	r3, #96	@ 0x60
 80024b2:	d877      	bhi.n	80025a4 <HAL_TIM_ConfigClockSource+0x16c>
 80024b4:	2b50      	cmp	r3, #80	@ 0x50
 80024b6:	d03c      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0xfa>
 80024b8:	2b50      	cmp	r3, #80	@ 0x50
 80024ba:	d873      	bhi.n	80025a4 <HAL_TIM_ConfigClockSource+0x16c>
 80024bc:	2b40      	cmp	r3, #64	@ 0x40
 80024be:	d058      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x13a>
 80024c0:	2b40      	cmp	r3, #64	@ 0x40
 80024c2:	d86f      	bhi.n	80025a4 <HAL_TIM_ConfigClockSource+0x16c>
 80024c4:	2b30      	cmp	r3, #48	@ 0x30
 80024c6:	d064      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x15a>
 80024c8:	2b30      	cmp	r3, #48	@ 0x30
 80024ca:	d86b      	bhi.n	80025a4 <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d060      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x15a>
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d867      	bhi.n	80025a4 <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d05c      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x15a>
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d05a      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0x15a>
 80024dc:	e062      	b.n	80025a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024ee:	f000 faf5 	bl	8002adc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002500:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	609a      	str	r2, [r3, #8]
      break;
 800250a:	e04f      	b.n	80025ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800251c:	f000 fade 	bl	8002adc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800252e:	609a      	str	r2, [r3, #8]
      break;
 8002530:	e03c      	b.n	80025ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800253e:	461a      	mov	r2, r3
 8002540:	f000 f99c 	bl	800287c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2150      	movs	r1, #80	@ 0x50
 800254a:	4618      	mov	r0, r3
 800254c:	f000 faab 	bl	8002aa6 <TIM_ITRx_SetConfig>
      break;
 8002550:	e02c      	b.n	80025ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800255e:	461a      	mov	r2, r3
 8002560:	f000 f9f8 	bl	8002954 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2160      	movs	r1, #96	@ 0x60
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fa9b 	bl	8002aa6 <TIM_ITRx_SetConfig>
      break;
 8002570:	e01c      	b.n	80025ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800257e:	461a      	mov	r2, r3
 8002580:	f000 f97c 	bl	800287c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2140      	movs	r1, #64	@ 0x40
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fa8b 	bl	8002aa6 <TIM_ITRx_SetConfig>
      break;
 8002590:	e00c      	b.n	80025ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4619      	mov	r1, r3
 800259c:	4610      	mov	r0, r2
 800259e:	f000 fa82 	bl	8002aa6 <TIM_ITRx_SetConfig>
      break;
 80025a2:	e003      	b.n	80025ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	73fb      	strb	r3, [r7, #15]
      break;
 80025a8:	e000      	b.n	80025ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	d831      	bhi.n	8002640 <HAL_TIM_ReadCapturedValue+0x78>
 80025dc:	a201      	add	r2, pc, #4	@ (adr r2, 80025e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	08002619 	.word	0x08002619
 80025e8:	08002641 	.word	0x08002641
 80025ec:	08002641 	.word	0x08002641
 80025f0:	08002641 	.word	0x08002641
 80025f4:	08002623 	.word	0x08002623
 80025f8:	08002641 	.word	0x08002641
 80025fc:	08002641 	.word	0x08002641
 8002600:	08002641 	.word	0x08002641
 8002604:	0800262d 	.word	0x0800262d
 8002608:	08002641 	.word	0x08002641
 800260c:	08002641 	.word	0x08002641
 8002610:	08002641 	.word	0x08002641
 8002614:	08002637 	.word	0x08002637
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261e:	60fb      	str	r3, [r7, #12]

      break;
 8002620:	e00f      	b.n	8002642 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002628:	60fb      	str	r3, [r7, #12]

      break;
 800262a:	e00a      	b.n	8002642 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002632:	60fb      	str	r3, [r7, #12]

      break;
 8002634:	e005      	b.n	8002642 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	60fb      	str	r3, [r7, #12]

      break;
 800263e:	e000      	b.n	8002642 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002640:	bf00      	nop
  }

  return tmpreg;
 8002642:	68fb      	ldr	r3, [r7, #12]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3714      	adds	r7, #20
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a37      	ldr	r2, [pc, #220]	@ (8002790 <TIM_Base_SetConfig+0xf0>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d00f      	beq.n	80026d8 <TIM_Base_SetConfig+0x38>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026be:	d00b      	beq.n	80026d8 <TIM_Base_SetConfig+0x38>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a34      	ldr	r2, [pc, #208]	@ (8002794 <TIM_Base_SetConfig+0xf4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d007      	beq.n	80026d8 <TIM_Base_SetConfig+0x38>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a33      	ldr	r2, [pc, #204]	@ (8002798 <TIM_Base_SetConfig+0xf8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d003      	beq.n	80026d8 <TIM_Base_SetConfig+0x38>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a32      	ldr	r2, [pc, #200]	@ (800279c <TIM_Base_SetConfig+0xfc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d108      	bne.n	80026ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a28      	ldr	r2, [pc, #160]	@ (8002790 <TIM_Base_SetConfig+0xf0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01b      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f8:	d017      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a25      	ldr	r2, [pc, #148]	@ (8002794 <TIM_Base_SetConfig+0xf4>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a24      	ldr	r2, [pc, #144]	@ (8002798 <TIM_Base_SetConfig+0xf8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00f      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a23      	ldr	r2, [pc, #140]	@ (800279c <TIM_Base_SetConfig+0xfc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00b      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a22      	ldr	r2, [pc, #136]	@ (80027a0 <TIM_Base_SetConfig+0x100>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a21      	ldr	r2, [pc, #132]	@ (80027a4 <TIM_Base_SetConfig+0x104>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d003      	beq.n	800272a <TIM_Base_SetConfig+0x8a>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a20      	ldr	r2, [pc, #128]	@ (80027a8 <TIM_Base_SetConfig+0x108>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d108      	bne.n	800273c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a0c      	ldr	r2, [pc, #48]	@ (8002790 <TIM_Base_SetConfig+0xf0>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d103      	bne.n	800276a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	691a      	ldr	r2, [r3, #16]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f043 0204 	orr.w	r2, r3, #4
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68fa      	ldr	r2, [r7, #12]
 8002780:	601a      	str	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40010000 	.word	0x40010000
 8002794:	40000400 	.word	0x40000400
 8002798:	40000800 	.word	0x40000800
 800279c:	40000c00 	.word	0x40000c00
 80027a0:	40014000 	.word	0x40014000
 80027a4:	40014400 	.word	0x40014400
 80027a8:	40014800 	.word	0x40014800

080027ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
 80027b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f023 0201 	bic.w	r2, r3, #1
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4a24      	ldr	r2, [pc, #144]	@ (8002868 <TIM_TI1_SetConfig+0xbc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <TIM_TI1_SetConfig+0x56>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e0:	d00f      	beq.n	8002802 <TIM_TI1_SetConfig+0x56>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a21      	ldr	r2, [pc, #132]	@ (800286c <TIM_TI1_SetConfig+0xc0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d00b      	beq.n	8002802 <TIM_TI1_SetConfig+0x56>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4a20      	ldr	r2, [pc, #128]	@ (8002870 <TIM_TI1_SetConfig+0xc4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d007      	beq.n	8002802 <TIM_TI1_SetConfig+0x56>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4a1f      	ldr	r2, [pc, #124]	@ (8002874 <TIM_TI1_SetConfig+0xc8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d003      	beq.n	8002802 <TIM_TI1_SetConfig+0x56>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002878 <TIM_TI1_SetConfig+0xcc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <TIM_TI1_SetConfig+0x5a>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <TIM_TI1_SetConfig+0x5c>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f023 0303 	bic.w	r3, r3, #3
 8002812:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	e003      	b.n	8002826 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800282c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	b2db      	uxtb	r3, r3
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f023 030a 	bic.w	r3, r3, #10
 8002840:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 030a 	and.w	r3, r3, #10
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	693a      	ldr	r2, [r7, #16]
 8002858:	621a      	str	r2, [r3, #32]
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40010000 	.word	0x40010000
 800286c:	40000400 	.word	0x40000400
 8002870:	40000800 	.word	0x40000800
 8002874:	40000c00 	.word	0x40000c00
 8002878:	40014000 	.word	0x40014000

0800287c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800287c:	b480      	push	{r7}
 800287e:	b087      	sub	sp, #28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	f023 0201 	bic.w	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	011b      	lsls	r3, r3, #4
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	f023 030a 	bic.w	r3, r3, #10
 80028b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	621a      	str	r2, [r3, #32]
}
 80028ce:	bf00      	nop
 80028d0:	371c      	adds	r7, #28
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80028da:	b480      	push	{r7}
 80028dc:	b087      	sub	sp, #28
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a1b      	ldr	r3, [r3, #32]
 80028f2:	f023 0210 	bic.w	r2, r3, #16
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	699b      	ldr	r3, [r3, #24]
 80028fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002918:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	031b      	lsls	r3, r3, #12
 800291e:	b29b      	uxth	r3, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800292c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	011b      	lsls	r3, r3, #4
 8002932:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	621a      	str	r2, [r3, #32]
}
 8002948:	bf00      	nop
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f023 0210 	bic.w	r2, r3, #16
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800297e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	031b      	lsls	r3, r3, #12
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002990:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	4313      	orrs	r3, r2
 800299a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	621a      	str	r2, [r3, #32]
}
 80029a8:	bf00      	nop
 80029aa:	371c      	adds	r7, #28
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f023 0303 	bic.w	r3, r3, #3
 80029e0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80029f0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8002a04:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	021b      	lsls	r3, r3, #8
 8002a0a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	621a      	str	r2, [r3, #32]
}
 8002a20:	bf00      	nop
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a58:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a6a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	031b      	lsls	r3, r3, #12
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8002a7e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	031b      	lsls	r3, r3, #12
 8002a84:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	621a      	str	r2, [r3, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	371c      	adds	r7, #28
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b085      	sub	sp, #20
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002abc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002abe:	683a      	ldr	r2, [r7, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f043 0307 	orr.w	r3, r3, #7
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68fa      	ldr	r2, [r7, #12]
 8002ace:	609a      	str	r2, [r3, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
 8002ae8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002af6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	021a      	lsls	r2, r3, #8
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	609a      	str	r2, [r3, #8]
}
 8002b10:	bf00      	nop
 8002b12:	371c      	adds	r7, #28
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b087      	sub	sp, #28
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	2201      	movs	r2, #1
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a1a      	ldr	r2, [r3, #32]
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	401a      	ands	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a1a      	ldr	r2, [r3, #32]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f003 031f 	and.w	r3, r3, #31
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	621a      	str	r2, [r3, #32]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e050      	b.n	8002c22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8002c30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d018      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bcc:	d013      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a18      	ldr	r2, [pc, #96]	@ (8002c34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a16      	ldr	r2, [pc, #88]	@ (8002c38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d009      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a15      	ldr	r2, [pc, #84]	@ (8002c3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d004      	beq.n	8002bf6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a13      	ldr	r2, [pc, #76]	@ (8002c40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10c      	bne.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	40010000 	.word	0x40010000
 8002c34:	40000400 	.word	0x40000400
 8002c38:	40000800 	.word	0x40000800
 8002c3c:	40000c00 	.word	0x40000c00
 8002c40:	40014000 	.word	0x40014000

08002c44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e042      	b.n	8002d04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d106      	bne.n	8002c98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7fd ff78 	bl	8000b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	@ 0x24
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002cae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f973 	bl	8002f9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695a      	ldr	r2, [r3, #20]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002cd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ce4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2220      	movs	r2, #32
 8002cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	@ 0x28
 8002d10:	af02      	add	r7, sp, #8
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d175      	bne.n	8002e18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_UART_Transmit+0x2c>
 8002d32:	88fb      	ldrh	r3, [r7, #6]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d101      	bne.n	8002d3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e06e      	b.n	8002e1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2221      	movs	r2, #33	@ 0x21
 8002d46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d4a:	f7fe f877 	bl	8000e3c <HAL_GetTick>
 8002d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	88fa      	ldrh	r2, [r7, #6]
 8002d5a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d64:	d108      	bne.n	8002d78 <HAL_UART_Transmit+0x6c>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	e003      	b.n	8002d80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d80:	e02e      	b.n	8002de0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2180      	movs	r1, #128	@ 0x80
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f848 	bl	8002e22 <UART_WaitOnFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d005      	beq.n	8002da4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e03a      	b.n	8002e1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10b      	bne.n	8002dc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	e007      	b.n	8002dd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1cb      	bne.n	8002d82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2200      	movs	r2, #0
 8002df2:	2140      	movs	r1, #64	@ 0x40
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f814 	bl	8002e22 <UART_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d005      	beq.n	8002e0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e006      	b.n	8002e1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	e000      	b.n	8002e1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002e18:	2302      	movs	r3, #2
  }
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3720      	adds	r7, #32
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e32:	e03b      	b.n	8002eac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3a:	d037      	beq.n	8002eac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e3c:	f7fd fffe 	bl	8000e3c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	6a3a      	ldr	r2, [r7, #32]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d302      	bcc.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e03a      	b.n	8002ecc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d023      	beq.n	8002eac <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b80      	cmp	r3, #128	@ 0x80
 8002e68:	d020      	beq.n	8002eac <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b40      	cmp	r3, #64	@ 0x40
 8002e6e:	d01d      	beq.n	8002eac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d116      	bne.n	8002eac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 f81d 	bl	8002ed4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2208      	movs	r2, #8
 8002e9e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e00f      	b.n	8002ecc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	461a      	mov	r2, r3
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d0b4      	beq.n	8002e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b095      	sub	sp, #84	@ 0x54
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	330c      	adds	r3, #12
 8002ee2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee6:	e853 3f00 	ldrex	r3, [r3]
 8002eea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	330c      	adds	r3, #12
 8002efa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002efc:	643a      	str	r2, [r7, #64]	@ 0x40
 8002efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002f02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e5      	bne.n	8002edc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3314      	adds	r3, #20
 8002f16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3314      	adds	r3, #20
 8002f2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002f30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f38:	e841 2300 	strex	r3, r2, [r1]
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1e5      	bne.n	8002f10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d119      	bne.n	8002f80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	e853 3f00 	ldrex	r3, [r3]
 8002f5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f023 0310 	bic.w	r3, r3, #16
 8002f62:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	330c      	adds	r3, #12
 8002f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f6c:	61ba      	str	r2, [r7, #24]
 8002f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f70:	6979      	ldr	r1, [r7, #20]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	e841 2300 	strex	r3, r2, [r1]
 8002f78:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1e5      	bne.n	8002f4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002f8e:	bf00      	nop
 8002f90:	3754      	adds	r7, #84	@ 0x54
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa0:	b0c0      	sub	sp, #256	@ 0x100
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fb8:	68d9      	ldr	r1, [r3, #12]
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	ea40 0301 	orr.w	r3, r0, r1
 8002fc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002ff4:	f021 010c 	bic.w	r1, r1, #12
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003002:	430b      	orrs	r3, r1
 8003004:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003016:	6999      	ldr	r1, [r3, #24]
 8003018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	ea40 0301 	orr.w	r3, r0, r1
 8003022:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4b8f      	ldr	r3, [pc, #572]	@ (8003268 <UART_SetConfig+0x2cc>)
 800302c:	429a      	cmp	r2, r3
 800302e:	d005      	beq.n	800303c <UART_SetConfig+0xa0>
 8003030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	4b8d      	ldr	r3, [pc, #564]	@ (800326c <UART_SetConfig+0x2d0>)
 8003038:	429a      	cmp	r2, r3
 800303a:	d104      	bne.n	8003046 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800303c:	f7fe fe3e 	bl	8001cbc <HAL_RCC_GetPCLK2Freq>
 8003040:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003044:	e003      	b.n	800304e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003046:	f7fe fe25 	bl	8001c94 <HAL_RCC_GetPCLK1Freq>
 800304a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800304e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003058:	f040 810c 	bne.w	8003274 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800305c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003060:	2200      	movs	r2, #0
 8003062:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003066:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800306a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800306e:	4622      	mov	r2, r4
 8003070:	462b      	mov	r3, r5
 8003072:	1891      	adds	r1, r2, r2
 8003074:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003076:	415b      	adcs	r3, r3
 8003078:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800307a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800307e:	4621      	mov	r1, r4
 8003080:	eb12 0801 	adds.w	r8, r2, r1
 8003084:	4629      	mov	r1, r5
 8003086:	eb43 0901 	adc.w	r9, r3, r1
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003096:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800309a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800309e:	4690      	mov	r8, r2
 80030a0:	4699      	mov	r9, r3
 80030a2:	4623      	mov	r3, r4
 80030a4:	eb18 0303 	adds.w	r3, r8, r3
 80030a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030ac:	462b      	mov	r3, r5
 80030ae:	eb49 0303 	adc.w	r3, r9, r3
 80030b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2200      	movs	r2, #0
 80030be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80030c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80030c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80030ca:	460b      	mov	r3, r1
 80030cc:	18db      	adds	r3, r3, r3
 80030ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80030d0:	4613      	mov	r3, r2
 80030d2:	eb42 0303 	adc.w	r3, r2, r3
 80030d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80030d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80030dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80030e0:	f7fd f8d6 	bl	8000290 <__aeabi_uldivmod>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4b61      	ldr	r3, [pc, #388]	@ (8003270 <UART_SetConfig+0x2d4>)
 80030ea:	fba3 2302 	umull	r2, r3, r3, r2
 80030ee:	095b      	lsrs	r3, r3, #5
 80030f0:	011c      	lsls	r4, r3, #4
 80030f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003100:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003104:	4642      	mov	r2, r8
 8003106:	464b      	mov	r3, r9
 8003108:	1891      	adds	r1, r2, r2
 800310a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800310c:	415b      	adcs	r3, r3
 800310e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003110:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003114:	4641      	mov	r1, r8
 8003116:	eb12 0a01 	adds.w	sl, r2, r1
 800311a:	4649      	mov	r1, r9
 800311c:	eb43 0b01 	adc.w	fp, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800312c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003130:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003134:	4692      	mov	sl, r2
 8003136:	469b      	mov	fp, r3
 8003138:	4643      	mov	r3, r8
 800313a:	eb1a 0303 	adds.w	r3, sl, r3
 800313e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003142:	464b      	mov	r3, r9
 8003144:	eb4b 0303 	adc.w	r3, fp, r3
 8003148:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800314c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003158:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800315c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003160:	460b      	mov	r3, r1
 8003162:	18db      	adds	r3, r3, r3
 8003164:	643b      	str	r3, [r7, #64]	@ 0x40
 8003166:	4613      	mov	r3, r2
 8003168:	eb42 0303 	adc.w	r3, r2, r3
 800316c:	647b      	str	r3, [r7, #68]	@ 0x44
 800316e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003172:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003176:	f7fd f88b 	bl	8000290 <__aeabi_uldivmod>
 800317a:	4602      	mov	r2, r0
 800317c:	460b      	mov	r3, r1
 800317e:	4611      	mov	r1, r2
 8003180:	4b3b      	ldr	r3, [pc, #236]	@ (8003270 <UART_SetConfig+0x2d4>)
 8003182:	fba3 2301 	umull	r2, r3, r3, r1
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	2264      	movs	r2, #100	@ 0x64
 800318a:	fb02 f303 	mul.w	r3, r2, r3
 800318e:	1acb      	subs	r3, r1, r3
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003196:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <UART_SetConfig+0x2d4>)
 8003198:	fba3 2302 	umull	r2, r3, r3, r2
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031a4:	441c      	add	r4, r3
 80031a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031aa:	2200      	movs	r2, #0
 80031ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80031b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80031b8:	4642      	mov	r2, r8
 80031ba:	464b      	mov	r3, r9
 80031bc:	1891      	adds	r1, r2, r2
 80031be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031c0:	415b      	adcs	r3, r3
 80031c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80031c8:	4641      	mov	r1, r8
 80031ca:	1851      	adds	r1, r2, r1
 80031cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80031ce:	4649      	mov	r1, r9
 80031d0:	414b      	adcs	r3, r1
 80031d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80031d4:	f04f 0200 	mov.w	r2, #0
 80031d8:	f04f 0300 	mov.w	r3, #0
 80031dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80031e0:	4659      	mov	r1, fp
 80031e2:	00cb      	lsls	r3, r1, #3
 80031e4:	4651      	mov	r1, sl
 80031e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ea:	4651      	mov	r1, sl
 80031ec:	00ca      	lsls	r2, r1, #3
 80031ee:	4610      	mov	r0, r2
 80031f0:	4619      	mov	r1, r3
 80031f2:	4603      	mov	r3, r0
 80031f4:	4642      	mov	r2, r8
 80031f6:	189b      	adds	r3, r3, r2
 80031f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80031fc:	464b      	mov	r3, r9
 80031fe:	460a      	mov	r2, r1
 8003200:	eb42 0303 	adc.w	r3, r2, r3
 8003204:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003214:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003218:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800321c:	460b      	mov	r3, r1
 800321e:	18db      	adds	r3, r3, r3
 8003220:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003222:	4613      	mov	r3, r2
 8003224:	eb42 0303 	adc.w	r3, r2, r3
 8003228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800322a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800322e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003232:	f7fd f82d 	bl	8000290 <__aeabi_uldivmod>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <UART_SetConfig+0x2d4>)
 800323c:	fba3 1302 	umull	r1, r3, r3, r2
 8003240:	095b      	lsrs	r3, r3, #5
 8003242:	2164      	movs	r1, #100	@ 0x64
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	3332      	adds	r3, #50	@ 0x32
 800324e:	4a08      	ldr	r2, [pc, #32]	@ (8003270 <UART_SetConfig+0x2d4>)
 8003250:	fba2 2303 	umull	r2, r3, r2, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	f003 0207 	and.w	r2, r3, #7
 800325a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4422      	add	r2, r4
 8003262:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003264:	e106      	b.n	8003474 <UART_SetConfig+0x4d8>
 8003266:	bf00      	nop
 8003268:	40011000 	.word	0x40011000
 800326c:	40011400 	.word	0x40011400
 8003270:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003274:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003278:	2200      	movs	r2, #0
 800327a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800327e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003282:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003286:	4642      	mov	r2, r8
 8003288:	464b      	mov	r3, r9
 800328a:	1891      	adds	r1, r2, r2
 800328c:	6239      	str	r1, [r7, #32]
 800328e:	415b      	adcs	r3, r3
 8003290:	627b      	str	r3, [r7, #36]	@ 0x24
 8003292:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003296:	4641      	mov	r1, r8
 8003298:	1854      	adds	r4, r2, r1
 800329a:	4649      	mov	r1, r9
 800329c:	eb43 0501 	adc.w	r5, r3, r1
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	00eb      	lsls	r3, r5, #3
 80032aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ae:	00e2      	lsls	r2, r4, #3
 80032b0:	4614      	mov	r4, r2
 80032b2:	461d      	mov	r5, r3
 80032b4:	4643      	mov	r3, r8
 80032b6:	18e3      	adds	r3, r4, r3
 80032b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032bc:	464b      	mov	r3, r9
 80032be:	eb45 0303 	adc.w	r3, r5, r3
 80032c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80032e2:	4629      	mov	r1, r5
 80032e4:	008b      	lsls	r3, r1, #2
 80032e6:	4621      	mov	r1, r4
 80032e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032ec:	4621      	mov	r1, r4
 80032ee:	008a      	lsls	r2, r1, #2
 80032f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80032f4:	f7fc ffcc 	bl	8000290 <__aeabi_uldivmod>
 80032f8:	4602      	mov	r2, r0
 80032fa:	460b      	mov	r3, r1
 80032fc:	4b60      	ldr	r3, [pc, #384]	@ (8003480 <UART_SetConfig+0x4e4>)
 80032fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	011c      	lsls	r4, r3, #4
 8003306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800330a:	2200      	movs	r2, #0
 800330c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003310:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003314:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003318:	4642      	mov	r2, r8
 800331a:	464b      	mov	r3, r9
 800331c:	1891      	adds	r1, r2, r2
 800331e:	61b9      	str	r1, [r7, #24]
 8003320:	415b      	adcs	r3, r3
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003328:	4641      	mov	r1, r8
 800332a:	1851      	adds	r1, r2, r1
 800332c:	6139      	str	r1, [r7, #16]
 800332e:	4649      	mov	r1, r9
 8003330:	414b      	adcs	r3, r1
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003340:	4659      	mov	r1, fp
 8003342:	00cb      	lsls	r3, r1, #3
 8003344:	4651      	mov	r1, sl
 8003346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800334a:	4651      	mov	r1, sl
 800334c:	00ca      	lsls	r2, r1, #3
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	4603      	mov	r3, r0
 8003354:	4642      	mov	r2, r8
 8003356:	189b      	adds	r3, r3, r2
 8003358:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800335c:	464b      	mov	r3, r9
 800335e:	460a      	mov	r2, r1
 8003360:	eb42 0303 	adc.w	r3, r2, r3
 8003364:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003372:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003380:	4649      	mov	r1, r9
 8003382:	008b      	lsls	r3, r1, #2
 8003384:	4641      	mov	r1, r8
 8003386:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800338a:	4641      	mov	r1, r8
 800338c:	008a      	lsls	r2, r1, #2
 800338e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003392:	f7fc ff7d 	bl	8000290 <__aeabi_uldivmod>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4611      	mov	r1, r2
 800339c:	4b38      	ldr	r3, [pc, #224]	@ (8003480 <UART_SetConfig+0x4e4>)
 800339e:	fba3 2301 	umull	r2, r3, r3, r1
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	2264      	movs	r2, #100	@ 0x64
 80033a6:	fb02 f303 	mul.w	r3, r2, r3
 80033aa:	1acb      	subs	r3, r1, r3
 80033ac:	011b      	lsls	r3, r3, #4
 80033ae:	3332      	adds	r3, #50	@ 0x32
 80033b0:	4a33      	ldr	r2, [pc, #204]	@ (8003480 <UART_SetConfig+0x4e4>)
 80033b2:	fba2 2303 	umull	r2, r3, r2, r3
 80033b6:	095b      	lsrs	r3, r3, #5
 80033b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033bc:	441c      	add	r4, r3
 80033be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033c2:	2200      	movs	r2, #0
 80033c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80033c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80033c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80033cc:	4642      	mov	r2, r8
 80033ce:	464b      	mov	r3, r9
 80033d0:	1891      	adds	r1, r2, r2
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	415b      	adcs	r3, r3
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033dc:	4641      	mov	r1, r8
 80033de:	1851      	adds	r1, r2, r1
 80033e0:	6039      	str	r1, [r7, #0]
 80033e2:	4649      	mov	r1, r9
 80033e4:	414b      	adcs	r3, r1
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033f4:	4659      	mov	r1, fp
 80033f6:	00cb      	lsls	r3, r1, #3
 80033f8:	4651      	mov	r1, sl
 80033fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033fe:	4651      	mov	r1, sl
 8003400:	00ca      	lsls	r2, r1, #3
 8003402:	4610      	mov	r0, r2
 8003404:	4619      	mov	r1, r3
 8003406:	4603      	mov	r3, r0
 8003408:	4642      	mov	r2, r8
 800340a:	189b      	adds	r3, r3, r2
 800340c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800340e:	464b      	mov	r3, r9
 8003410:	460a      	mov	r2, r1
 8003412:	eb42 0303 	adc.w	r3, r2, r3
 8003416:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	663b      	str	r3, [r7, #96]	@ 0x60
 8003422:	667a      	str	r2, [r7, #100]	@ 0x64
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003430:	4649      	mov	r1, r9
 8003432:	008b      	lsls	r3, r1, #2
 8003434:	4641      	mov	r1, r8
 8003436:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800343a:	4641      	mov	r1, r8
 800343c:	008a      	lsls	r2, r1, #2
 800343e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003442:	f7fc ff25 	bl	8000290 <__aeabi_uldivmod>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4b0d      	ldr	r3, [pc, #52]	@ (8003480 <UART_SetConfig+0x4e4>)
 800344c:	fba3 1302 	umull	r1, r3, r3, r2
 8003450:	095b      	lsrs	r3, r3, #5
 8003452:	2164      	movs	r1, #100	@ 0x64
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	3332      	adds	r3, #50	@ 0x32
 800345e:	4a08      	ldr	r2, [pc, #32]	@ (8003480 <UART_SetConfig+0x4e4>)
 8003460:	fba2 2303 	umull	r2, r3, r2, r3
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	f003 020f 	and.w	r2, r3, #15
 800346a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4422      	add	r2, r4
 8003472:	609a      	str	r2, [r3, #8]
}
 8003474:	bf00      	nop
 8003476:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800347a:	46bd      	mov	sp, r7
 800347c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003480:	51eb851f 	.word	0x51eb851f

08003484 <siprintf>:
 8003484:	b40e      	push	{r1, r2, r3}
 8003486:	b510      	push	{r4, lr}
 8003488:	b09d      	sub	sp, #116	@ 0x74
 800348a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800348c:	9002      	str	r0, [sp, #8]
 800348e:	9006      	str	r0, [sp, #24]
 8003490:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003494:	480a      	ldr	r0, [pc, #40]	@ (80034c0 <siprintf+0x3c>)
 8003496:	9107      	str	r1, [sp, #28]
 8003498:	9104      	str	r1, [sp, #16]
 800349a:	490a      	ldr	r1, [pc, #40]	@ (80034c4 <siprintf+0x40>)
 800349c:	f853 2b04 	ldr.w	r2, [r3], #4
 80034a0:	9105      	str	r1, [sp, #20]
 80034a2:	2400      	movs	r4, #0
 80034a4:	a902      	add	r1, sp, #8
 80034a6:	6800      	ldr	r0, [r0, #0]
 80034a8:	9301      	str	r3, [sp, #4]
 80034aa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80034ac:	f000 f994 	bl	80037d8 <_svfiprintf_r>
 80034b0:	9b02      	ldr	r3, [sp, #8]
 80034b2:	701c      	strb	r4, [r3, #0]
 80034b4:	b01d      	add	sp, #116	@ 0x74
 80034b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ba:	b003      	add	sp, #12
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	2000000c 	.word	0x2000000c
 80034c4:	ffff0208 	.word	0xffff0208

080034c8 <memset>:
 80034c8:	4402      	add	r2, r0
 80034ca:	4603      	mov	r3, r0
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d100      	bne.n	80034d2 <memset+0xa>
 80034d0:	4770      	bx	lr
 80034d2:	f803 1b01 	strb.w	r1, [r3], #1
 80034d6:	e7f9      	b.n	80034cc <memset+0x4>

080034d8 <__errno>:
 80034d8:	4b01      	ldr	r3, [pc, #4]	@ (80034e0 <__errno+0x8>)
 80034da:	6818      	ldr	r0, [r3, #0]
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	2000000c 	.word	0x2000000c

080034e4 <__libc_init_array>:
 80034e4:	b570      	push	{r4, r5, r6, lr}
 80034e6:	4d0d      	ldr	r5, [pc, #52]	@ (800351c <__libc_init_array+0x38>)
 80034e8:	4c0d      	ldr	r4, [pc, #52]	@ (8003520 <__libc_init_array+0x3c>)
 80034ea:	1b64      	subs	r4, r4, r5
 80034ec:	10a4      	asrs	r4, r4, #2
 80034ee:	2600      	movs	r6, #0
 80034f0:	42a6      	cmp	r6, r4
 80034f2:	d109      	bne.n	8003508 <__libc_init_array+0x24>
 80034f4:	4d0b      	ldr	r5, [pc, #44]	@ (8003524 <__libc_init_array+0x40>)
 80034f6:	4c0c      	ldr	r4, [pc, #48]	@ (8003528 <__libc_init_array+0x44>)
 80034f8:	f000 fc64 	bl	8003dc4 <_init>
 80034fc:	1b64      	subs	r4, r4, r5
 80034fe:	10a4      	asrs	r4, r4, #2
 8003500:	2600      	movs	r6, #0
 8003502:	42a6      	cmp	r6, r4
 8003504:	d105      	bne.n	8003512 <__libc_init_array+0x2e>
 8003506:	bd70      	pop	{r4, r5, r6, pc}
 8003508:	f855 3b04 	ldr.w	r3, [r5], #4
 800350c:	4798      	blx	r3
 800350e:	3601      	adds	r6, #1
 8003510:	e7ee      	b.n	80034f0 <__libc_init_array+0xc>
 8003512:	f855 3b04 	ldr.w	r3, [r5], #4
 8003516:	4798      	blx	r3
 8003518:	3601      	adds	r6, #1
 800351a:	e7f2      	b.n	8003502 <__libc_init_array+0x1e>
 800351c:	08003e68 	.word	0x08003e68
 8003520:	08003e68 	.word	0x08003e68
 8003524:	08003e68 	.word	0x08003e68
 8003528:	08003e6c 	.word	0x08003e6c

0800352c <__retarget_lock_acquire_recursive>:
 800352c:	4770      	bx	lr

0800352e <__retarget_lock_release_recursive>:
 800352e:	4770      	bx	lr

08003530 <_free_r>:
 8003530:	b538      	push	{r3, r4, r5, lr}
 8003532:	4605      	mov	r5, r0
 8003534:	2900      	cmp	r1, #0
 8003536:	d041      	beq.n	80035bc <_free_r+0x8c>
 8003538:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800353c:	1f0c      	subs	r4, r1, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	bfb8      	it	lt
 8003542:	18e4      	addlt	r4, r4, r3
 8003544:	f000 f8e0 	bl	8003708 <__malloc_lock>
 8003548:	4a1d      	ldr	r2, [pc, #116]	@ (80035c0 <_free_r+0x90>)
 800354a:	6813      	ldr	r3, [r2, #0]
 800354c:	b933      	cbnz	r3, 800355c <_free_r+0x2c>
 800354e:	6063      	str	r3, [r4, #4]
 8003550:	6014      	str	r4, [r2, #0]
 8003552:	4628      	mov	r0, r5
 8003554:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003558:	f000 b8dc 	b.w	8003714 <__malloc_unlock>
 800355c:	42a3      	cmp	r3, r4
 800355e:	d908      	bls.n	8003572 <_free_r+0x42>
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	1821      	adds	r1, r4, r0
 8003564:	428b      	cmp	r3, r1
 8003566:	bf01      	itttt	eq
 8003568:	6819      	ldreq	r1, [r3, #0]
 800356a:	685b      	ldreq	r3, [r3, #4]
 800356c:	1809      	addeq	r1, r1, r0
 800356e:	6021      	streq	r1, [r4, #0]
 8003570:	e7ed      	b.n	800354e <_free_r+0x1e>
 8003572:	461a      	mov	r2, r3
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	b10b      	cbz	r3, 800357c <_free_r+0x4c>
 8003578:	42a3      	cmp	r3, r4
 800357a:	d9fa      	bls.n	8003572 <_free_r+0x42>
 800357c:	6811      	ldr	r1, [r2, #0]
 800357e:	1850      	adds	r0, r2, r1
 8003580:	42a0      	cmp	r0, r4
 8003582:	d10b      	bne.n	800359c <_free_r+0x6c>
 8003584:	6820      	ldr	r0, [r4, #0]
 8003586:	4401      	add	r1, r0
 8003588:	1850      	adds	r0, r2, r1
 800358a:	4283      	cmp	r3, r0
 800358c:	6011      	str	r1, [r2, #0]
 800358e:	d1e0      	bne.n	8003552 <_free_r+0x22>
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	6053      	str	r3, [r2, #4]
 8003596:	4408      	add	r0, r1
 8003598:	6010      	str	r0, [r2, #0]
 800359a:	e7da      	b.n	8003552 <_free_r+0x22>
 800359c:	d902      	bls.n	80035a4 <_free_r+0x74>
 800359e:	230c      	movs	r3, #12
 80035a0:	602b      	str	r3, [r5, #0]
 80035a2:	e7d6      	b.n	8003552 <_free_r+0x22>
 80035a4:	6820      	ldr	r0, [r4, #0]
 80035a6:	1821      	adds	r1, r4, r0
 80035a8:	428b      	cmp	r3, r1
 80035aa:	bf04      	itt	eq
 80035ac:	6819      	ldreq	r1, [r3, #0]
 80035ae:	685b      	ldreq	r3, [r3, #4]
 80035b0:	6063      	str	r3, [r4, #4]
 80035b2:	bf04      	itt	eq
 80035b4:	1809      	addeq	r1, r1, r0
 80035b6:	6021      	streq	r1, [r4, #0]
 80035b8:	6054      	str	r4, [r2, #4]
 80035ba:	e7ca      	b.n	8003552 <_free_r+0x22>
 80035bc:	bd38      	pop	{r3, r4, r5, pc}
 80035be:	bf00      	nop
 80035c0:	2000025c 	.word	0x2000025c

080035c4 <sbrk_aligned>:
 80035c4:	b570      	push	{r4, r5, r6, lr}
 80035c6:	4e0f      	ldr	r6, [pc, #60]	@ (8003604 <sbrk_aligned+0x40>)
 80035c8:	460c      	mov	r4, r1
 80035ca:	6831      	ldr	r1, [r6, #0]
 80035cc:	4605      	mov	r5, r0
 80035ce:	b911      	cbnz	r1, 80035d6 <sbrk_aligned+0x12>
 80035d0:	f000 fba4 	bl	8003d1c <_sbrk_r>
 80035d4:	6030      	str	r0, [r6, #0]
 80035d6:	4621      	mov	r1, r4
 80035d8:	4628      	mov	r0, r5
 80035da:	f000 fb9f 	bl	8003d1c <_sbrk_r>
 80035de:	1c43      	adds	r3, r0, #1
 80035e0:	d103      	bne.n	80035ea <sbrk_aligned+0x26>
 80035e2:	f04f 34ff 	mov.w	r4, #4294967295
 80035e6:	4620      	mov	r0, r4
 80035e8:	bd70      	pop	{r4, r5, r6, pc}
 80035ea:	1cc4      	adds	r4, r0, #3
 80035ec:	f024 0403 	bic.w	r4, r4, #3
 80035f0:	42a0      	cmp	r0, r4
 80035f2:	d0f8      	beq.n	80035e6 <sbrk_aligned+0x22>
 80035f4:	1a21      	subs	r1, r4, r0
 80035f6:	4628      	mov	r0, r5
 80035f8:	f000 fb90 	bl	8003d1c <_sbrk_r>
 80035fc:	3001      	adds	r0, #1
 80035fe:	d1f2      	bne.n	80035e6 <sbrk_aligned+0x22>
 8003600:	e7ef      	b.n	80035e2 <sbrk_aligned+0x1e>
 8003602:	bf00      	nop
 8003604:	20000258 	.word	0x20000258

08003608 <_malloc_r>:
 8003608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800360c:	1ccd      	adds	r5, r1, #3
 800360e:	f025 0503 	bic.w	r5, r5, #3
 8003612:	3508      	adds	r5, #8
 8003614:	2d0c      	cmp	r5, #12
 8003616:	bf38      	it	cc
 8003618:	250c      	movcc	r5, #12
 800361a:	2d00      	cmp	r5, #0
 800361c:	4606      	mov	r6, r0
 800361e:	db01      	blt.n	8003624 <_malloc_r+0x1c>
 8003620:	42a9      	cmp	r1, r5
 8003622:	d904      	bls.n	800362e <_malloc_r+0x26>
 8003624:	230c      	movs	r3, #12
 8003626:	6033      	str	r3, [r6, #0]
 8003628:	2000      	movs	r0, #0
 800362a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800362e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003704 <_malloc_r+0xfc>
 8003632:	f000 f869 	bl	8003708 <__malloc_lock>
 8003636:	f8d8 3000 	ldr.w	r3, [r8]
 800363a:	461c      	mov	r4, r3
 800363c:	bb44      	cbnz	r4, 8003690 <_malloc_r+0x88>
 800363e:	4629      	mov	r1, r5
 8003640:	4630      	mov	r0, r6
 8003642:	f7ff ffbf 	bl	80035c4 <sbrk_aligned>
 8003646:	1c43      	adds	r3, r0, #1
 8003648:	4604      	mov	r4, r0
 800364a:	d158      	bne.n	80036fe <_malloc_r+0xf6>
 800364c:	f8d8 4000 	ldr.w	r4, [r8]
 8003650:	4627      	mov	r7, r4
 8003652:	2f00      	cmp	r7, #0
 8003654:	d143      	bne.n	80036de <_malloc_r+0xd6>
 8003656:	2c00      	cmp	r4, #0
 8003658:	d04b      	beq.n	80036f2 <_malloc_r+0xea>
 800365a:	6823      	ldr	r3, [r4, #0]
 800365c:	4639      	mov	r1, r7
 800365e:	4630      	mov	r0, r6
 8003660:	eb04 0903 	add.w	r9, r4, r3
 8003664:	f000 fb5a 	bl	8003d1c <_sbrk_r>
 8003668:	4581      	cmp	r9, r0
 800366a:	d142      	bne.n	80036f2 <_malloc_r+0xea>
 800366c:	6821      	ldr	r1, [r4, #0]
 800366e:	1a6d      	subs	r5, r5, r1
 8003670:	4629      	mov	r1, r5
 8003672:	4630      	mov	r0, r6
 8003674:	f7ff ffa6 	bl	80035c4 <sbrk_aligned>
 8003678:	3001      	adds	r0, #1
 800367a:	d03a      	beq.n	80036f2 <_malloc_r+0xea>
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	442b      	add	r3, r5
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	f8d8 3000 	ldr.w	r3, [r8]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	bb62      	cbnz	r2, 80036e4 <_malloc_r+0xdc>
 800368a:	f8c8 7000 	str.w	r7, [r8]
 800368e:	e00f      	b.n	80036b0 <_malloc_r+0xa8>
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	1b52      	subs	r2, r2, r5
 8003694:	d420      	bmi.n	80036d8 <_malloc_r+0xd0>
 8003696:	2a0b      	cmp	r2, #11
 8003698:	d917      	bls.n	80036ca <_malloc_r+0xc2>
 800369a:	1961      	adds	r1, r4, r5
 800369c:	42a3      	cmp	r3, r4
 800369e:	6025      	str	r5, [r4, #0]
 80036a0:	bf18      	it	ne
 80036a2:	6059      	strne	r1, [r3, #4]
 80036a4:	6863      	ldr	r3, [r4, #4]
 80036a6:	bf08      	it	eq
 80036a8:	f8c8 1000 	streq.w	r1, [r8]
 80036ac:	5162      	str	r2, [r4, r5]
 80036ae:	604b      	str	r3, [r1, #4]
 80036b0:	4630      	mov	r0, r6
 80036b2:	f000 f82f 	bl	8003714 <__malloc_unlock>
 80036b6:	f104 000b 	add.w	r0, r4, #11
 80036ba:	1d23      	adds	r3, r4, #4
 80036bc:	f020 0007 	bic.w	r0, r0, #7
 80036c0:	1ac2      	subs	r2, r0, r3
 80036c2:	bf1c      	itt	ne
 80036c4:	1a1b      	subne	r3, r3, r0
 80036c6:	50a3      	strne	r3, [r4, r2]
 80036c8:	e7af      	b.n	800362a <_malloc_r+0x22>
 80036ca:	6862      	ldr	r2, [r4, #4]
 80036cc:	42a3      	cmp	r3, r4
 80036ce:	bf0c      	ite	eq
 80036d0:	f8c8 2000 	streq.w	r2, [r8]
 80036d4:	605a      	strne	r2, [r3, #4]
 80036d6:	e7eb      	b.n	80036b0 <_malloc_r+0xa8>
 80036d8:	4623      	mov	r3, r4
 80036da:	6864      	ldr	r4, [r4, #4]
 80036dc:	e7ae      	b.n	800363c <_malloc_r+0x34>
 80036de:	463c      	mov	r4, r7
 80036e0:	687f      	ldr	r7, [r7, #4]
 80036e2:	e7b6      	b.n	8003652 <_malloc_r+0x4a>
 80036e4:	461a      	mov	r2, r3
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	42a3      	cmp	r3, r4
 80036ea:	d1fb      	bne.n	80036e4 <_malloc_r+0xdc>
 80036ec:	2300      	movs	r3, #0
 80036ee:	6053      	str	r3, [r2, #4]
 80036f0:	e7de      	b.n	80036b0 <_malloc_r+0xa8>
 80036f2:	230c      	movs	r3, #12
 80036f4:	6033      	str	r3, [r6, #0]
 80036f6:	4630      	mov	r0, r6
 80036f8:	f000 f80c 	bl	8003714 <__malloc_unlock>
 80036fc:	e794      	b.n	8003628 <_malloc_r+0x20>
 80036fe:	6005      	str	r5, [r0, #0]
 8003700:	e7d6      	b.n	80036b0 <_malloc_r+0xa8>
 8003702:	bf00      	nop
 8003704:	2000025c 	.word	0x2000025c

08003708 <__malloc_lock>:
 8003708:	4801      	ldr	r0, [pc, #4]	@ (8003710 <__malloc_lock+0x8>)
 800370a:	f7ff bf0f 	b.w	800352c <__retarget_lock_acquire_recursive>
 800370e:	bf00      	nop
 8003710:	20000254 	.word	0x20000254

08003714 <__malloc_unlock>:
 8003714:	4801      	ldr	r0, [pc, #4]	@ (800371c <__malloc_unlock+0x8>)
 8003716:	f7ff bf0a 	b.w	800352e <__retarget_lock_release_recursive>
 800371a:	bf00      	nop
 800371c:	20000254 	.word	0x20000254

08003720 <__ssputs_r>:
 8003720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003724:	688e      	ldr	r6, [r1, #8]
 8003726:	461f      	mov	r7, r3
 8003728:	42be      	cmp	r6, r7
 800372a:	680b      	ldr	r3, [r1, #0]
 800372c:	4682      	mov	sl, r0
 800372e:	460c      	mov	r4, r1
 8003730:	4690      	mov	r8, r2
 8003732:	d82d      	bhi.n	8003790 <__ssputs_r+0x70>
 8003734:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003738:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800373c:	d026      	beq.n	800378c <__ssputs_r+0x6c>
 800373e:	6965      	ldr	r5, [r4, #20]
 8003740:	6909      	ldr	r1, [r1, #16]
 8003742:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003746:	eba3 0901 	sub.w	r9, r3, r1
 800374a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800374e:	1c7b      	adds	r3, r7, #1
 8003750:	444b      	add	r3, r9
 8003752:	106d      	asrs	r5, r5, #1
 8003754:	429d      	cmp	r5, r3
 8003756:	bf38      	it	cc
 8003758:	461d      	movcc	r5, r3
 800375a:	0553      	lsls	r3, r2, #21
 800375c:	d527      	bpl.n	80037ae <__ssputs_r+0x8e>
 800375e:	4629      	mov	r1, r5
 8003760:	f7ff ff52 	bl	8003608 <_malloc_r>
 8003764:	4606      	mov	r6, r0
 8003766:	b360      	cbz	r0, 80037c2 <__ssputs_r+0xa2>
 8003768:	6921      	ldr	r1, [r4, #16]
 800376a:	464a      	mov	r2, r9
 800376c:	f000 fae6 	bl	8003d3c <memcpy>
 8003770:	89a3      	ldrh	r3, [r4, #12]
 8003772:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003776:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800377a:	81a3      	strh	r3, [r4, #12]
 800377c:	6126      	str	r6, [r4, #16]
 800377e:	6165      	str	r5, [r4, #20]
 8003780:	444e      	add	r6, r9
 8003782:	eba5 0509 	sub.w	r5, r5, r9
 8003786:	6026      	str	r6, [r4, #0]
 8003788:	60a5      	str	r5, [r4, #8]
 800378a:	463e      	mov	r6, r7
 800378c:	42be      	cmp	r6, r7
 800378e:	d900      	bls.n	8003792 <__ssputs_r+0x72>
 8003790:	463e      	mov	r6, r7
 8003792:	6820      	ldr	r0, [r4, #0]
 8003794:	4632      	mov	r2, r6
 8003796:	4641      	mov	r1, r8
 8003798:	f000 faa6 	bl	8003ce8 <memmove>
 800379c:	68a3      	ldr	r3, [r4, #8]
 800379e:	1b9b      	subs	r3, r3, r6
 80037a0:	60a3      	str	r3, [r4, #8]
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	4433      	add	r3, r6
 80037a6:	6023      	str	r3, [r4, #0]
 80037a8:	2000      	movs	r0, #0
 80037aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037ae:	462a      	mov	r2, r5
 80037b0:	f000 fad2 	bl	8003d58 <_realloc_r>
 80037b4:	4606      	mov	r6, r0
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d1e0      	bne.n	800377c <__ssputs_r+0x5c>
 80037ba:	6921      	ldr	r1, [r4, #16]
 80037bc:	4650      	mov	r0, sl
 80037be:	f7ff feb7 	bl	8003530 <_free_r>
 80037c2:	230c      	movs	r3, #12
 80037c4:	f8ca 3000 	str.w	r3, [sl]
 80037c8:	89a3      	ldrh	r3, [r4, #12]
 80037ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037ce:	81a3      	strh	r3, [r4, #12]
 80037d0:	f04f 30ff 	mov.w	r0, #4294967295
 80037d4:	e7e9      	b.n	80037aa <__ssputs_r+0x8a>
	...

080037d8 <_svfiprintf_r>:
 80037d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037dc:	4698      	mov	r8, r3
 80037de:	898b      	ldrh	r3, [r1, #12]
 80037e0:	061b      	lsls	r3, r3, #24
 80037e2:	b09d      	sub	sp, #116	@ 0x74
 80037e4:	4607      	mov	r7, r0
 80037e6:	460d      	mov	r5, r1
 80037e8:	4614      	mov	r4, r2
 80037ea:	d510      	bpl.n	800380e <_svfiprintf_r+0x36>
 80037ec:	690b      	ldr	r3, [r1, #16]
 80037ee:	b973      	cbnz	r3, 800380e <_svfiprintf_r+0x36>
 80037f0:	2140      	movs	r1, #64	@ 0x40
 80037f2:	f7ff ff09 	bl	8003608 <_malloc_r>
 80037f6:	6028      	str	r0, [r5, #0]
 80037f8:	6128      	str	r0, [r5, #16]
 80037fa:	b930      	cbnz	r0, 800380a <_svfiprintf_r+0x32>
 80037fc:	230c      	movs	r3, #12
 80037fe:	603b      	str	r3, [r7, #0]
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	b01d      	add	sp, #116	@ 0x74
 8003806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800380a:	2340      	movs	r3, #64	@ 0x40
 800380c:	616b      	str	r3, [r5, #20]
 800380e:	2300      	movs	r3, #0
 8003810:	9309      	str	r3, [sp, #36]	@ 0x24
 8003812:	2320      	movs	r3, #32
 8003814:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003818:	f8cd 800c 	str.w	r8, [sp, #12]
 800381c:	2330      	movs	r3, #48	@ 0x30
 800381e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80039bc <_svfiprintf_r+0x1e4>
 8003822:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003826:	f04f 0901 	mov.w	r9, #1
 800382a:	4623      	mov	r3, r4
 800382c:	469a      	mov	sl, r3
 800382e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003832:	b10a      	cbz	r2, 8003838 <_svfiprintf_r+0x60>
 8003834:	2a25      	cmp	r2, #37	@ 0x25
 8003836:	d1f9      	bne.n	800382c <_svfiprintf_r+0x54>
 8003838:	ebba 0b04 	subs.w	fp, sl, r4
 800383c:	d00b      	beq.n	8003856 <_svfiprintf_r+0x7e>
 800383e:	465b      	mov	r3, fp
 8003840:	4622      	mov	r2, r4
 8003842:	4629      	mov	r1, r5
 8003844:	4638      	mov	r0, r7
 8003846:	f7ff ff6b 	bl	8003720 <__ssputs_r>
 800384a:	3001      	adds	r0, #1
 800384c:	f000 80a7 	beq.w	800399e <_svfiprintf_r+0x1c6>
 8003850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003852:	445a      	add	r2, fp
 8003854:	9209      	str	r2, [sp, #36]	@ 0x24
 8003856:	f89a 3000 	ldrb.w	r3, [sl]
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 809f 	beq.w	800399e <_svfiprintf_r+0x1c6>
 8003860:	2300      	movs	r3, #0
 8003862:	f04f 32ff 	mov.w	r2, #4294967295
 8003866:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800386a:	f10a 0a01 	add.w	sl, sl, #1
 800386e:	9304      	str	r3, [sp, #16]
 8003870:	9307      	str	r3, [sp, #28]
 8003872:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003876:	931a      	str	r3, [sp, #104]	@ 0x68
 8003878:	4654      	mov	r4, sl
 800387a:	2205      	movs	r2, #5
 800387c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003880:	484e      	ldr	r0, [pc, #312]	@ (80039bc <_svfiprintf_r+0x1e4>)
 8003882:	f7fc fcb5 	bl	80001f0 <memchr>
 8003886:	9a04      	ldr	r2, [sp, #16]
 8003888:	b9d8      	cbnz	r0, 80038c2 <_svfiprintf_r+0xea>
 800388a:	06d0      	lsls	r0, r2, #27
 800388c:	bf44      	itt	mi
 800388e:	2320      	movmi	r3, #32
 8003890:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003894:	0711      	lsls	r1, r2, #28
 8003896:	bf44      	itt	mi
 8003898:	232b      	movmi	r3, #43	@ 0x2b
 800389a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800389e:	f89a 3000 	ldrb.w	r3, [sl]
 80038a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80038a4:	d015      	beq.n	80038d2 <_svfiprintf_r+0xfa>
 80038a6:	9a07      	ldr	r2, [sp, #28]
 80038a8:	4654      	mov	r4, sl
 80038aa:	2000      	movs	r0, #0
 80038ac:	f04f 0c0a 	mov.w	ip, #10
 80038b0:	4621      	mov	r1, r4
 80038b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038b6:	3b30      	subs	r3, #48	@ 0x30
 80038b8:	2b09      	cmp	r3, #9
 80038ba:	d94b      	bls.n	8003954 <_svfiprintf_r+0x17c>
 80038bc:	b1b0      	cbz	r0, 80038ec <_svfiprintf_r+0x114>
 80038be:	9207      	str	r2, [sp, #28]
 80038c0:	e014      	b.n	80038ec <_svfiprintf_r+0x114>
 80038c2:	eba0 0308 	sub.w	r3, r0, r8
 80038c6:	fa09 f303 	lsl.w	r3, r9, r3
 80038ca:	4313      	orrs	r3, r2
 80038cc:	9304      	str	r3, [sp, #16]
 80038ce:	46a2      	mov	sl, r4
 80038d0:	e7d2      	b.n	8003878 <_svfiprintf_r+0xa0>
 80038d2:	9b03      	ldr	r3, [sp, #12]
 80038d4:	1d19      	adds	r1, r3, #4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	9103      	str	r1, [sp, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bfbb      	ittet	lt
 80038de:	425b      	neglt	r3, r3
 80038e0:	f042 0202 	orrlt.w	r2, r2, #2
 80038e4:	9307      	strge	r3, [sp, #28]
 80038e6:	9307      	strlt	r3, [sp, #28]
 80038e8:	bfb8      	it	lt
 80038ea:	9204      	strlt	r2, [sp, #16]
 80038ec:	7823      	ldrb	r3, [r4, #0]
 80038ee:	2b2e      	cmp	r3, #46	@ 0x2e
 80038f0:	d10a      	bne.n	8003908 <_svfiprintf_r+0x130>
 80038f2:	7863      	ldrb	r3, [r4, #1]
 80038f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80038f6:	d132      	bne.n	800395e <_svfiprintf_r+0x186>
 80038f8:	9b03      	ldr	r3, [sp, #12]
 80038fa:	1d1a      	adds	r2, r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	9203      	str	r2, [sp, #12]
 8003900:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003904:	3402      	adds	r4, #2
 8003906:	9305      	str	r3, [sp, #20]
 8003908:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80039cc <_svfiprintf_r+0x1f4>
 800390c:	7821      	ldrb	r1, [r4, #0]
 800390e:	2203      	movs	r2, #3
 8003910:	4650      	mov	r0, sl
 8003912:	f7fc fc6d 	bl	80001f0 <memchr>
 8003916:	b138      	cbz	r0, 8003928 <_svfiprintf_r+0x150>
 8003918:	9b04      	ldr	r3, [sp, #16]
 800391a:	eba0 000a 	sub.w	r0, r0, sl
 800391e:	2240      	movs	r2, #64	@ 0x40
 8003920:	4082      	lsls	r2, r0
 8003922:	4313      	orrs	r3, r2
 8003924:	3401      	adds	r4, #1
 8003926:	9304      	str	r3, [sp, #16]
 8003928:	f814 1b01 	ldrb.w	r1, [r4], #1
 800392c:	4824      	ldr	r0, [pc, #144]	@ (80039c0 <_svfiprintf_r+0x1e8>)
 800392e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003932:	2206      	movs	r2, #6
 8003934:	f7fc fc5c 	bl	80001f0 <memchr>
 8003938:	2800      	cmp	r0, #0
 800393a:	d036      	beq.n	80039aa <_svfiprintf_r+0x1d2>
 800393c:	4b21      	ldr	r3, [pc, #132]	@ (80039c4 <_svfiprintf_r+0x1ec>)
 800393e:	bb1b      	cbnz	r3, 8003988 <_svfiprintf_r+0x1b0>
 8003940:	9b03      	ldr	r3, [sp, #12]
 8003942:	3307      	adds	r3, #7
 8003944:	f023 0307 	bic.w	r3, r3, #7
 8003948:	3308      	adds	r3, #8
 800394a:	9303      	str	r3, [sp, #12]
 800394c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800394e:	4433      	add	r3, r6
 8003950:	9309      	str	r3, [sp, #36]	@ 0x24
 8003952:	e76a      	b.n	800382a <_svfiprintf_r+0x52>
 8003954:	fb0c 3202 	mla	r2, ip, r2, r3
 8003958:	460c      	mov	r4, r1
 800395a:	2001      	movs	r0, #1
 800395c:	e7a8      	b.n	80038b0 <_svfiprintf_r+0xd8>
 800395e:	2300      	movs	r3, #0
 8003960:	3401      	adds	r4, #1
 8003962:	9305      	str	r3, [sp, #20]
 8003964:	4619      	mov	r1, r3
 8003966:	f04f 0c0a 	mov.w	ip, #10
 800396a:	4620      	mov	r0, r4
 800396c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003970:	3a30      	subs	r2, #48	@ 0x30
 8003972:	2a09      	cmp	r2, #9
 8003974:	d903      	bls.n	800397e <_svfiprintf_r+0x1a6>
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0c6      	beq.n	8003908 <_svfiprintf_r+0x130>
 800397a:	9105      	str	r1, [sp, #20]
 800397c:	e7c4      	b.n	8003908 <_svfiprintf_r+0x130>
 800397e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003982:	4604      	mov	r4, r0
 8003984:	2301      	movs	r3, #1
 8003986:	e7f0      	b.n	800396a <_svfiprintf_r+0x192>
 8003988:	ab03      	add	r3, sp, #12
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	462a      	mov	r2, r5
 800398e:	4b0e      	ldr	r3, [pc, #56]	@ (80039c8 <_svfiprintf_r+0x1f0>)
 8003990:	a904      	add	r1, sp, #16
 8003992:	4638      	mov	r0, r7
 8003994:	f3af 8000 	nop.w
 8003998:	1c42      	adds	r2, r0, #1
 800399a:	4606      	mov	r6, r0
 800399c:	d1d6      	bne.n	800394c <_svfiprintf_r+0x174>
 800399e:	89ab      	ldrh	r3, [r5, #12]
 80039a0:	065b      	lsls	r3, r3, #25
 80039a2:	f53f af2d 	bmi.w	8003800 <_svfiprintf_r+0x28>
 80039a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039a8:	e72c      	b.n	8003804 <_svfiprintf_r+0x2c>
 80039aa:	ab03      	add	r3, sp, #12
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	462a      	mov	r2, r5
 80039b0:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <_svfiprintf_r+0x1f0>)
 80039b2:	a904      	add	r1, sp, #16
 80039b4:	4638      	mov	r0, r7
 80039b6:	f000 f879 	bl	8003aac <_printf_i>
 80039ba:	e7ed      	b.n	8003998 <_svfiprintf_r+0x1c0>
 80039bc:	08003e2c 	.word	0x08003e2c
 80039c0:	08003e36 	.word	0x08003e36
 80039c4:	00000000 	.word	0x00000000
 80039c8:	08003721 	.word	0x08003721
 80039cc:	08003e32 	.word	0x08003e32

080039d0 <_printf_common>:
 80039d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039d4:	4616      	mov	r6, r2
 80039d6:	4698      	mov	r8, r3
 80039d8:	688a      	ldr	r2, [r1, #8]
 80039da:	690b      	ldr	r3, [r1, #16]
 80039dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80039e0:	4293      	cmp	r3, r2
 80039e2:	bfb8      	it	lt
 80039e4:	4613      	movlt	r3, r2
 80039e6:	6033      	str	r3, [r6, #0]
 80039e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80039ec:	4607      	mov	r7, r0
 80039ee:	460c      	mov	r4, r1
 80039f0:	b10a      	cbz	r2, 80039f6 <_printf_common+0x26>
 80039f2:	3301      	adds	r3, #1
 80039f4:	6033      	str	r3, [r6, #0]
 80039f6:	6823      	ldr	r3, [r4, #0]
 80039f8:	0699      	lsls	r1, r3, #26
 80039fa:	bf42      	ittt	mi
 80039fc:	6833      	ldrmi	r3, [r6, #0]
 80039fe:	3302      	addmi	r3, #2
 8003a00:	6033      	strmi	r3, [r6, #0]
 8003a02:	6825      	ldr	r5, [r4, #0]
 8003a04:	f015 0506 	ands.w	r5, r5, #6
 8003a08:	d106      	bne.n	8003a18 <_printf_common+0x48>
 8003a0a:	f104 0a19 	add.w	sl, r4, #25
 8003a0e:	68e3      	ldr	r3, [r4, #12]
 8003a10:	6832      	ldr	r2, [r6, #0]
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	42ab      	cmp	r3, r5
 8003a16:	dc26      	bgt.n	8003a66 <_printf_common+0x96>
 8003a18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a1c:	6822      	ldr	r2, [r4, #0]
 8003a1e:	3b00      	subs	r3, #0
 8003a20:	bf18      	it	ne
 8003a22:	2301      	movne	r3, #1
 8003a24:	0692      	lsls	r2, r2, #26
 8003a26:	d42b      	bmi.n	8003a80 <_printf_common+0xb0>
 8003a28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a2c:	4641      	mov	r1, r8
 8003a2e:	4638      	mov	r0, r7
 8003a30:	47c8      	blx	r9
 8003a32:	3001      	adds	r0, #1
 8003a34:	d01e      	beq.n	8003a74 <_printf_common+0xa4>
 8003a36:	6823      	ldr	r3, [r4, #0]
 8003a38:	6922      	ldr	r2, [r4, #16]
 8003a3a:	f003 0306 	and.w	r3, r3, #6
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	bf02      	ittt	eq
 8003a42:	68e5      	ldreq	r5, [r4, #12]
 8003a44:	6833      	ldreq	r3, [r6, #0]
 8003a46:	1aed      	subeq	r5, r5, r3
 8003a48:	68a3      	ldr	r3, [r4, #8]
 8003a4a:	bf0c      	ite	eq
 8003a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a50:	2500      	movne	r5, #0
 8003a52:	4293      	cmp	r3, r2
 8003a54:	bfc4      	itt	gt
 8003a56:	1a9b      	subgt	r3, r3, r2
 8003a58:	18ed      	addgt	r5, r5, r3
 8003a5a:	2600      	movs	r6, #0
 8003a5c:	341a      	adds	r4, #26
 8003a5e:	42b5      	cmp	r5, r6
 8003a60:	d11a      	bne.n	8003a98 <_printf_common+0xc8>
 8003a62:	2000      	movs	r0, #0
 8003a64:	e008      	b.n	8003a78 <_printf_common+0xa8>
 8003a66:	2301      	movs	r3, #1
 8003a68:	4652      	mov	r2, sl
 8003a6a:	4641      	mov	r1, r8
 8003a6c:	4638      	mov	r0, r7
 8003a6e:	47c8      	blx	r9
 8003a70:	3001      	adds	r0, #1
 8003a72:	d103      	bne.n	8003a7c <_printf_common+0xac>
 8003a74:	f04f 30ff 	mov.w	r0, #4294967295
 8003a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a7c:	3501      	adds	r5, #1
 8003a7e:	e7c6      	b.n	8003a0e <_printf_common+0x3e>
 8003a80:	18e1      	adds	r1, r4, r3
 8003a82:	1c5a      	adds	r2, r3, #1
 8003a84:	2030      	movs	r0, #48	@ 0x30
 8003a86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003a8a:	4422      	add	r2, r4
 8003a8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a94:	3302      	adds	r3, #2
 8003a96:	e7c7      	b.n	8003a28 <_printf_common+0x58>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	4622      	mov	r2, r4
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	47c8      	blx	r9
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d0e6      	beq.n	8003a74 <_printf_common+0xa4>
 8003aa6:	3601      	adds	r6, #1
 8003aa8:	e7d9      	b.n	8003a5e <_printf_common+0x8e>
	...

08003aac <_printf_i>:
 8003aac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab0:	7e0f      	ldrb	r7, [r1, #24]
 8003ab2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003ab4:	2f78      	cmp	r7, #120	@ 0x78
 8003ab6:	4691      	mov	r9, r2
 8003ab8:	4680      	mov	r8, r0
 8003aba:	460c      	mov	r4, r1
 8003abc:	469a      	mov	sl, r3
 8003abe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003ac2:	d807      	bhi.n	8003ad4 <_printf_i+0x28>
 8003ac4:	2f62      	cmp	r7, #98	@ 0x62
 8003ac6:	d80a      	bhi.n	8003ade <_printf_i+0x32>
 8003ac8:	2f00      	cmp	r7, #0
 8003aca:	f000 80d1 	beq.w	8003c70 <_printf_i+0x1c4>
 8003ace:	2f58      	cmp	r7, #88	@ 0x58
 8003ad0:	f000 80b8 	beq.w	8003c44 <_printf_i+0x198>
 8003ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ad8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003adc:	e03a      	b.n	8003b54 <_printf_i+0xa8>
 8003ade:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ae2:	2b15      	cmp	r3, #21
 8003ae4:	d8f6      	bhi.n	8003ad4 <_printf_i+0x28>
 8003ae6:	a101      	add	r1, pc, #4	@ (adr r1, 8003aec <_printf_i+0x40>)
 8003ae8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003aec:	08003b45 	.word	0x08003b45
 8003af0:	08003b59 	.word	0x08003b59
 8003af4:	08003ad5 	.word	0x08003ad5
 8003af8:	08003ad5 	.word	0x08003ad5
 8003afc:	08003ad5 	.word	0x08003ad5
 8003b00:	08003ad5 	.word	0x08003ad5
 8003b04:	08003b59 	.word	0x08003b59
 8003b08:	08003ad5 	.word	0x08003ad5
 8003b0c:	08003ad5 	.word	0x08003ad5
 8003b10:	08003ad5 	.word	0x08003ad5
 8003b14:	08003ad5 	.word	0x08003ad5
 8003b18:	08003c57 	.word	0x08003c57
 8003b1c:	08003b83 	.word	0x08003b83
 8003b20:	08003c11 	.word	0x08003c11
 8003b24:	08003ad5 	.word	0x08003ad5
 8003b28:	08003ad5 	.word	0x08003ad5
 8003b2c:	08003c79 	.word	0x08003c79
 8003b30:	08003ad5 	.word	0x08003ad5
 8003b34:	08003b83 	.word	0x08003b83
 8003b38:	08003ad5 	.word	0x08003ad5
 8003b3c:	08003ad5 	.word	0x08003ad5
 8003b40:	08003c19 	.word	0x08003c19
 8003b44:	6833      	ldr	r3, [r6, #0]
 8003b46:	1d1a      	adds	r2, r3, #4
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6032      	str	r2, [r6, #0]
 8003b4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b54:	2301      	movs	r3, #1
 8003b56:	e09c      	b.n	8003c92 <_printf_i+0x1e6>
 8003b58:	6833      	ldr	r3, [r6, #0]
 8003b5a:	6820      	ldr	r0, [r4, #0]
 8003b5c:	1d19      	adds	r1, r3, #4
 8003b5e:	6031      	str	r1, [r6, #0]
 8003b60:	0606      	lsls	r6, r0, #24
 8003b62:	d501      	bpl.n	8003b68 <_printf_i+0xbc>
 8003b64:	681d      	ldr	r5, [r3, #0]
 8003b66:	e003      	b.n	8003b70 <_printf_i+0xc4>
 8003b68:	0645      	lsls	r5, r0, #25
 8003b6a:	d5fb      	bpl.n	8003b64 <_printf_i+0xb8>
 8003b6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003b70:	2d00      	cmp	r5, #0
 8003b72:	da03      	bge.n	8003b7c <_printf_i+0xd0>
 8003b74:	232d      	movs	r3, #45	@ 0x2d
 8003b76:	426d      	negs	r5, r5
 8003b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b7c:	4858      	ldr	r0, [pc, #352]	@ (8003ce0 <_printf_i+0x234>)
 8003b7e:	230a      	movs	r3, #10
 8003b80:	e011      	b.n	8003ba6 <_printf_i+0xfa>
 8003b82:	6821      	ldr	r1, [r4, #0]
 8003b84:	6833      	ldr	r3, [r6, #0]
 8003b86:	0608      	lsls	r0, r1, #24
 8003b88:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b8c:	d402      	bmi.n	8003b94 <_printf_i+0xe8>
 8003b8e:	0649      	lsls	r1, r1, #25
 8003b90:	bf48      	it	mi
 8003b92:	b2ad      	uxthmi	r5, r5
 8003b94:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b96:	4852      	ldr	r0, [pc, #328]	@ (8003ce0 <_printf_i+0x234>)
 8003b98:	6033      	str	r3, [r6, #0]
 8003b9a:	bf14      	ite	ne
 8003b9c:	230a      	movne	r3, #10
 8003b9e:	2308      	moveq	r3, #8
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ba6:	6866      	ldr	r6, [r4, #4]
 8003ba8:	60a6      	str	r6, [r4, #8]
 8003baa:	2e00      	cmp	r6, #0
 8003bac:	db05      	blt.n	8003bba <_printf_i+0x10e>
 8003bae:	6821      	ldr	r1, [r4, #0]
 8003bb0:	432e      	orrs	r6, r5
 8003bb2:	f021 0104 	bic.w	r1, r1, #4
 8003bb6:	6021      	str	r1, [r4, #0]
 8003bb8:	d04b      	beq.n	8003c52 <_printf_i+0x1a6>
 8003bba:	4616      	mov	r6, r2
 8003bbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bc0:	fb03 5711 	mls	r7, r3, r1, r5
 8003bc4:	5dc7      	ldrb	r7, [r0, r7]
 8003bc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003bca:	462f      	mov	r7, r5
 8003bcc:	42bb      	cmp	r3, r7
 8003bce:	460d      	mov	r5, r1
 8003bd0:	d9f4      	bls.n	8003bbc <_printf_i+0x110>
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d10b      	bne.n	8003bee <_printf_i+0x142>
 8003bd6:	6823      	ldr	r3, [r4, #0]
 8003bd8:	07df      	lsls	r7, r3, #31
 8003bda:	d508      	bpl.n	8003bee <_printf_i+0x142>
 8003bdc:	6923      	ldr	r3, [r4, #16]
 8003bde:	6861      	ldr	r1, [r4, #4]
 8003be0:	4299      	cmp	r1, r3
 8003be2:	bfde      	ittt	le
 8003be4:	2330      	movle	r3, #48	@ 0x30
 8003be6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003bea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003bee:	1b92      	subs	r2, r2, r6
 8003bf0:	6122      	str	r2, [r4, #16]
 8003bf2:	f8cd a000 	str.w	sl, [sp]
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	aa03      	add	r2, sp, #12
 8003bfa:	4621      	mov	r1, r4
 8003bfc:	4640      	mov	r0, r8
 8003bfe:	f7ff fee7 	bl	80039d0 <_printf_common>
 8003c02:	3001      	adds	r0, #1
 8003c04:	d14a      	bne.n	8003c9c <_printf_i+0x1f0>
 8003c06:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0a:	b004      	add	sp, #16
 8003c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	f043 0320 	orr.w	r3, r3, #32
 8003c16:	6023      	str	r3, [r4, #0]
 8003c18:	4832      	ldr	r0, [pc, #200]	@ (8003ce4 <_printf_i+0x238>)
 8003c1a:	2778      	movs	r7, #120	@ 0x78
 8003c1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	6831      	ldr	r1, [r6, #0]
 8003c24:	061f      	lsls	r7, r3, #24
 8003c26:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c2a:	d402      	bmi.n	8003c32 <_printf_i+0x186>
 8003c2c:	065f      	lsls	r7, r3, #25
 8003c2e:	bf48      	it	mi
 8003c30:	b2ad      	uxthmi	r5, r5
 8003c32:	6031      	str	r1, [r6, #0]
 8003c34:	07d9      	lsls	r1, r3, #31
 8003c36:	bf44      	itt	mi
 8003c38:	f043 0320 	orrmi.w	r3, r3, #32
 8003c3c:	6023      	strmi	r3, [r4, #0]
 8003c3e:	b11d      	cbz	r5, 8003c48 <_printf_i+0x19c>
 8003c40:	2310      	movs	r3, #16
 8003c42:	e7ad      	b.n	8003ba0 <_printf_i+0xf4>
 8003c44:	4826      	ldr	r0, [pc, #152]	@ (8003ce0 <_printf_i+0x234>)
 8003c46:	e7e9      	b.n	8003c1c <_printf_i+0x170>
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	f023 0320 	bic.w	r3, r3, #32
 8003c4e:	6023      	str	r3, [r4, #0]
 8003c50:	e7f6      	b.n	8003c40 <_printf_i+0x194>
 8003c52:	4616      	mov	r6, r2
 8003c54:	e7bd      	b.n	8003bd2 <_printf_i+0x126>
 8003c56:	6833      	ldr	r3, [r6, #0]
 8003c58:	6825      	ldr	r5, [r4, #0]
 8003c5a:	6961      	ldr	r1, [r4, #20]
 8003c5c:	1d18      	adds	r0, r3, #4
 8003c5e:	6030      	str	r0, [r6, #0]
 8003c60:	062e      	lsls	r6, r5, #24
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	d501      	bpl.n	8003c6a <_printf_i+0x1be>
 8003c66:	6019      	str	r1, [r3, #0]
 8003c68:	e002      	b.n	8003c70 <_printf_i+0x1c4>
 8003c6a:	0668      	lsls	r0, r5, #25
 8003c6c:	d5fb      	bpl.n	8003c66 <_printf_i+0x1ba>
 8003c6e:	8019      	strh	r1, [r3, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	6123      	str	r3, [r4, #16]
 8003c74:	4616      	mov	r6, r2
 8003c76:	e7bc      	b.n	8003bf2 <_printf_i+0x146>
 8003c78:	6833      	ldr	r3, [r6, #0]
 8003c7a:	1d1a      	adds	r2, r3, #4
 8003c7c:	6032      	str	r2, [r6, #0]
 8003c7e:	681e      	ldr	r6, [r3, #0]
 8003c80:	6862      	ldr	r2, [r4, #4]
 8003c82:	2100      	movs	r1, #0
 8003c84:	4630      	mov	r0, r6
 8003c86:	f7fc fab3 	bl	80001f0 <memchr>
 8003c8a:	b108      	cbz	r0, 8003c90 <_printf_i+0x1e4>
 8003c8c:	1b80      	subs	r0, r0, r6
 8003c8e:	6060      	str	r0, [r4, #4]
 8003c90:	6863      	ldr	r3, [r4, #4]
 8003c92:	6123      	str	r3, [r4, #16]
 8003c94:	2300      	movs	r3, #0
 8003c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c9a:	e7aa      	b.n	8003bf2 <_printf_i+0x146>
 8003c9c:	6923      	ldr	r3, [r4, #16]
 8003c9e:	4632      	mov	r2, r6
 8003ca0:	4649      	mov	r1, r9
 8003ca2:	4640      	mov	r0, r8
 8003ca4:	47d0      	blx	sl
 8003ca6:	3001      	adds	r0, #1
 8003ca8:	d0ad      	beq.n	8003c06 <_printf_i+0x15a>
 8003caa:	6823      	ldr	r3, [r4, #0]
 8003cac:	079b      	lsls	r3, r3, #30
 8003cae:	d413      	bmi.n	8003cd8 <_printf_i+0x22c>
 8003cb0:	68e0      	ldr	r0, [r4, #12]
 8003cb2:	9b03      	ldr	r3, [sp, #12]
 8003cb4:	4298      	cmp	r0, r3
 8003cb6:	bfb8      	it	lt
 8003cb8:	4618      	movlt	r0, r3
 8003cba:	e7a6      	b.n	8003c0a <_printf_i+0x15e>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	4632      	mov	r2, r6
 8003cc0:	4649      	mov	r1, r9
 8003cc2:	4640      	mov	r0, r8
 8003cc4:	47d0      	blx	sl
 8003cc6:	3001      	adds	r0, #1
 8003cc8:	d09d      	beq.n	8003c06 <_printf_i+0x15a>
 8003cca:	3501      	adds	r5, #1
 8003ccc:	68e3      	ldr	r3, [r4, #12]
 8003cce:	9903      	ldr	r1, [sp, #12]
 8003cd0:	1a5b      	subs	r3, r3, r1
 8003cd2:	42ab      	cmp	r3, r5
 8003cd4:	dcf2      	bgt.n	8003cbc <_printf_i+0x210>
 8003cd6:	e7eb      	b.n	8003cb0 <_printf_i+0x204>
 8003cd8:	2500      	movs	r5, #0
 8003cda:	f104 0619 	add.w	r6, r4, #25
 8003cde:	e7f5      	b.n	8003ccc <_printf_i+0x220>
 8003ce0:	08003e3d 	.word	0x08003e3d
 8003ce4:	08003e4e 	.word	0x08003e4e

08003ce8 <memmove>:
 8003ce8:	4288      	cmp	r0, r1
 8003cea:	b510      	push	{r4, lr}
 8003cec:	eb01 0402 	add.w	r4, r1, r2
 8003cf0:	d902      	bls.n	8003cf8 <memmove+0x10>
 8003cf2:	4284      	cmp	r4, r0
 8003cf4:	4623      	mov	r3, r4
 8003cf6:	d807      	bhi.n	8003d08 <memmove+0x20>
 8003cf8:	1e43      	subs	r3, r0, #1
 8003cfa:	42a1      	cmp	r1, r4
 8003cfc:	d008      	beq.n	8003d10 <memmove+0x28>
 8003cfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d06:	e7f8      	b.n	8003cfa <memmove+0x12>
 8003d08:	4402      	add	r2, r0
 8003d0a:	4601      	mov	r1, r0
 8003d0c:	428a      	cmp	r2, r1
 8003d0e:	d100      	bne.n	8003d12 <memmove+0x2a>
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d1a:	e7f7      	b.n	8003d0c <memmove+0x24>

08003d1c <_sbrk_r>:
 8003d1c:	b538      	push	{r3, r4, r5, lr}
 8003d1e:	4d06      	ldr	r5, [pc, #24]	@ (8003d38 <_sbrk_r+0x1c>)
 8003d20:	2300      	movs	r3, #0
 8003d22:	4604      	mov	r4, r0
 8003d24:	4608      	mov	r0, r1
 8003d26:	602b      	str	r3, [r5, #0]
 8003d28:	f7fc ffb0 	bl	8000c8c <_sbrk>
 8003d2c:	1c43      	adds	r3, r0, #1
 8003d2e:	d102      	bne.n	8003d36 <_sbrk_r+0x1a>
 8003d30:	682b      	ldr	r3, [r5, #0]
 8003d32:	b103      	cbz	r3, 8003d36 <_sbrk_r+0x1a>
 8003d34:	6023      	str	r3, [r4, #0]
 8003d36:	bd38      	pop	{r3, r4, r5, pc}
 8003d38:	20000250 	.word	0x20000250

08003d3c <memcpy>:
 8003d3c:	440a      	add	r2, r1
 8003d3e:	4291      	cmp	r1, r2
 8003d40:	f100 33ff 	add.w	r3, r0, #4294967295
 8003d44:	d100      	bne.n	8003d48 <memcpy+0xc>
 8003d46:	4770      	bx	lr
 8003d48:	b510      	push	{r4, lr}
 8003d4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003d4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003d52:	4291      	cmp	r1, r2
 8003d54:	d1f9      	bne.n	8003d4a <memcpy+0xe>
 8003d56:	bd10      	pop	{r4, pc}

08003d58 <_realloc_r>:
 8003d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d5c:	4607      	mov	r7, r0
 8003d5e:	4614      	mov	r4, r2
 8003d60:	460d      	mov	r5, r1
 8003d62:	b921      	cbnz	r1, 8003d6e <_realloc_r+0x16>
 8003d64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d68:	4611      	mov	r1, r2
 8003d6a:	f7ff bc4d 	b.w	8003608 <_malloc_r>
 8003d6e:	b92a      	cbnz	r2, 8003d7c <_realloc_r+0x24>
 8003d70:	f7ff fbde 	bl	8003530 <_free_r>
 8003d74:	4625      	mov	r5, r4
 8003d76:	4628      	mov	r0, r5
 8003d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d7c:	f000 f81a 	bl	8003db4 <_malloc_usable_size_r>
 8003d80:	4284      	cmp	r4, r0
 8003d82:	4606      	mov	r6, r0
 8003d84:	d802      	bhi.n	8003d8c <_realloc_r+0x34>
 8003d86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003d8a:	d8f4      	bhi.n	8003d76 <_realloc_r+0x1e>
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	4638      	mov	r0, r7
 8003d90:	f7ff fc3a 	bl	8003608 <_malloc_r>
 8003d94:	4680      	mov	r8, r0
 8003d96:	b908      	cbnz	r0, 8003d9c <_realloc_r+0x44>
 8003d98:	4645      	mov	r5, r8
 8003d9a:	e7ec      	b.n	8003d76 <_realloc_r+0x1e>
 8003d9c:	42b4      	cmp	r4, r6
 8003d9e:	4622      	mov	r2, r4
 8003da0:	4629      	mov	r1, r5
 8003da2:	bf28      	it	cs
 8003da4:	4632      	movcs	r2, r6
 8003da6:	f7ff ffc9 	bl	8003d3c <memcpy>
 8003daa:	4629      	mov	r1, r5
 8003dac:	4638      	mov	r0, r7
 8003dae:	f7ff fbbf 	bl	8003530 <_free_r>
 8003db2:	e7f1      	b.n	8003d98 <_realloc_r+0x40>

08003db4 <_malloc_usable_size_r>:
 8003db4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003db8:	1f18      	subs	r0, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	bfbc      	itt	lt
 8003dbe:	580b      	ldrlt	r3, [r1, r0]
 8003dc0:	18c0      	addlt	r0, r0, r3
 8003dc2:	4770      	bx	lr

08003dc4 <_init>:
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc6:	bf00      	nop
 8003dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dca:	bc08      	pop	{r3}
 8003dcc:	469e      	mov	lr, r3
 8003dce:	4770      	bx	lr

08003dd0 <_fini>:
 8003dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dd2:	bf00      	nop
 8003dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003dd6:	bc08      	pop	{r3}
 8003dd8:	469e      	mov	lr, r3
 8003dda:	4770      	bx	lr
